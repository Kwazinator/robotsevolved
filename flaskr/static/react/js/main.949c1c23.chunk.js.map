{"version":3,"sources":["components/LearnGameItems.js","constants/constants.js","components/MovesView.jsx","components/Square.jsx","components/Board.jsx","components/Robot.jsx","components/Wall.jsx","components/Goal.jsx","components/ColoredLine.jsx","constants/extend.js","components/YouWinModal.jsx","components/YouWinDailySingleModal.js","components/YouWinDailyFinalModal.js","components/AddPuzzleModal.jsx","components/ToggleSettings.js","components/Timer.js","containers/DisplayView.js","components/HighScores.jsx","components/DailyChallengeScores.jsx","containers/Modals/PuzzleRushFinishedModal.js","containers/Modals/RandomGameStatsModal.jsx","components/CloseIconWithOnClick.jsx","components/DescriptionList.jsx","components/YouWinLessonModal.js","components/ShowDailyChallengeScoresCard.jsx","components/DailyChallengeHistoryData.js","components/boardgenerator.js","containers/Modals/BoardResetModal.js","containers/Game.js","Pages/CreateGame.js","containers/FindGameElements.js","Pages/FindGame.js","Pages/PlayGame.js","Material-UI/themes.jsx","Pages/Home.js","containers/Modals/LoginModal.js","components/LoggedInUser.js","components/SignInButton.js","containers/Modals/PuzzleRushDifficultyModal.js","containers/Modals/RandomGameDifficultyModal.js","components/GameListItemView.jsx","components/SearchBarFindGame.jsx","components/ProfilePageComponents/ProfilePageCreatedGamesDetails.js","components/ProfilePageComponents/ProfilePageSolutionDetails.js","Pages/ProfilePage.js","Pages/RandomGamePage.js","Pages/PuzzleRushPage.js","Pages/LessonsPage.js","Pages/DailyChallenge.js","Pages/AboutUs.js","components/ShowDailyPuzzleHistory.js","Pages/DailyChallengeHistory.js","Pages/DailyChallengeHistoryAnswersPage.js","components/LoadingPage.jsx","App.js","serviceWorker.js","index.js"],"names":["LearnGameItems","props","handleClick","handleClickGame","index","selected","Button","variant","color","aria-label","onClick","name","UP","DIRECTION_MAP_IMAGES","yellow","DOWN","LEFT","RIGHT","red","green","blue","MovesView","style","width","float","display","this","moveHistory","length","map","move","src","playerState","robot","colorSignifier","dir","React","Component","styleoutside","dimension","position","dim","height","backgroundColor","top","left","styleinside","styleinside2","Square","border","margin","overflow","children","id","transition","styleoutsidedraggable","selectedColor","undefined","borderStyle","borderColor","borderRadius","Robot","onStopDragHandler","e","handleCreateMode","isCreateMode","buildMode","x","y","grid","draggableGrid","onStop","bounds","orientation","opacity","wallThickness","wallOffset","Wall","userSelect","styledragable","Goal","show","endPosition","obj","key","hasOwnProperty","YouWinModal","Dialog","onClose","handleClose","container","document","getElementById","BackdropProps","aria-labelledby","open","maxWidth","DialogTitle","DialogContent","dividers","numMoves","TextField","label","defaultValue","username","DialogActions","submitAnswer","resetPuzzle","YouWinDailySingleModal","Typography","totalMoves","undoMove","moveNextPuzzle","YouWinDailyFinalModal","handleClickSubmitGame","robotPosition","AddPuzzleModal","submitPuzzle","ToggleSettings","event","console","log","showColoredLineDirections","FormControlLabel","value","control","Switch","onChange","checked","Timer","state","minutes","seconds","timer","myInterval","setInterval","setState","puzzleRushTimeUp","clearInterval","valuetext","DisplayView","createMode","fullWidth","handleCreateBoardClick","toggleBuildMode","createBoardPressed","copyToClipboard","dummy","createElement","body","appendChild","window","location","host","uri","select","execCommand","removeChild","copiedClipboard","thisThing","copyButtonText","setTimeout","handleDimensionChange","getElementsByClassName","blur","parseInt","toString","DimensionChanged","showPuzzleLink","isPuzzleRush","isLesson","isDailyChallengeAnswers","isDailyChallenge","paddingBottom","marginRight","marginTop","marginBottom","Divider","ButtonGroup","toggleLineIndicators","gutterBottom","Slider","onChangeCommitted","getAriaValueText","step","marks","min","max","squareSizeValue","valueLabelDisplay","highscores","Grid","item","xs","marginleft","highscore","Paper","elevation","spacing","comment","userid","created","highscorestyle","wins","i","crowns","push","CrownCounter","user_id","score","submitted","direction","PuzzleRushWinModal","difficulty","md","List","dense","ListItem","ListItemText","primary","secondary","numPuzzlesCompleted","averageTime","averageMoves","differenceOptimal","movesPerSecond","playPuzzleRushAgain","closeModal","RandomGameStatsModal","showStatsModal","handleShowRandomAnswers","answers","lowestMoveSequence","lowestMoves","CloseIconWithOnClick","onMouseDown","Descriptionlist","tipsText","text","ListItemSecondaryAction","IconButton","edge","handleCloseToolTips","YouWinLessonModal","useStyles","makeStyles","root","minWidth","bullet","transform","title","fontSize","pos","ShowDailyChallengeScoresCard","classes","Card","className","CardContent","component","bestScore","MovesforPuzzle","MoveSequence","DailyChallengeHistoryData","difficultyforPuzzle","lowestMovesforPuzzle","nameSubmitted","scoreSubmitted","playerMovedSequence","checkDeadendHorizontal","wallHorizontalList","WallVertToPlace","LastWall","indexX","indexY","isWallAbove","wall","isWallBeside","checkDeadendTop","wallVerticleList","WallHorizToPlace","wallHorizList","isWallBesideLeft","isWallBesideRight","randomBoardPosition","dontPlacePositions","Y","X","tryAgain","Math","floor","random","randomPercent","type","boardState","wallVerticle","wallHorizontal","goal","randompos1","randompos2","randompos3","randompos4","randomPositions","extend","j","gameWon","playerStart","slice","BoardResetModal","createBoardHandler","preventDefault","percent","createBoard","textAlign","paddingRight","Input","inputProps","placeholder","addEventListener","keyCode","target","indexOf","formatGeneratedMoveSequence","moves","images","charAt","setDefaultSquareSize","boardWidth","boardHeight","drawerWidth","getComputedStyle","windowWidth","innerWidth","settingstop","innerHeight","settings","squarevalue","ColoredLineDirections","Game","updateHighscores","axios","get","then","res","JSON","parse","data","squareSize","copiedToClipboard","updateDailyHighscores","dc_id","handleClickDailyChallenge","componentDidMount","onkeydown","handleKeyDown","loadedGame","IntervalId","dailyChallengeMode","componentWillUnmount","newDirection","tabSelector","handleUndoMove","handlePlayerMovement","robotSelect","robotSelected","namesubmit","userInfo","post","puzzledata","authorname","history","handleLineDirections","showBoardResetPanelModal","closeRandomStatsModal","closeCreateBoardModal","closePuzzleRushFinishedModal","showPuzzleRushFinishedModal","board","BoardGenerator","handleCollision","dirObj","newPosition","robotX","robotY","minimumWall","checkRobot","totalMovesDiff","solutiondifference","numPuzzleon","totalMovesList","avgMoves","p_id","differenceFrom","percentile","submitDailyAnswer","LastRobotPosition","moveHistoryList","playerStateList","solutiondata","dc_movesList","dc_playerList","checkwin","puzzleRush","randomGame","dailyChallengeModeAnswers","Won","gamesWonDaily","games","handleDailyClickGame","learnMode","g_id","solutionmoves","g_moves","g_puzzledata","newarray","concat","oldPositon","prevPosition","splice","handleLearnClickGame","description","handleDailyClickAnswersGame","g_solutiondata","g_difficulty","solutionDataSubmitted","loadSidebar","game","paddingTop","DailyChallengeScores","HighScores","handlePlayerMovementFromMouse","moveObj","pop","createModeWallClick","indexToChange","newWallHorizontal","wallH","newWallVerticle","wallV","onStopDragHandlerGoal","round","lastY","lastX","goals","gamedata","savedMoves","g_uri","pushState","settingsWidth","settingsHeight","percentWall","settingsPercent","LineDirections","padding","alignItems","sm","numPuzzleRush","zeroMinWidth","Board","square","player","ColoredLineDirection","ColoredLine","puzzleRushPercentileCompleted","withRouter","CreateGame","withStyles","theme","upperPadding","lowerPadding","rightSideText","leftSideText","numberOfHighScores","trimName","substring","justifyContent","Tooltip","handleGameClick","flexItem","disableGutters","FindGame","handleFilterMenuOpen","anchorEl","currentTarget","handleCloseFilterMenu","handleSearchSubmit","searchTerm","searchRef","search","offset","highscoreslist","gameslist","InputBase","input","inputRef","ref","onKeyPress","iconButton","divider","startIcon","Menu","keepMounted","Boolean","MenuItem","FindGameElements","marginLeft","flex","PlayGame","flexGrow","homepage","griditems","paper","Width","image","img","maxHeight","baseExpansion","heading","typography","pxToRem","flexBasis","flexShrink","secondaryHeading","palette","darkmode","iconcards","marginBotton","iconcardsDaily","titlehome","fontFamily","iconfonts","createboardcard","content","demo","background","centeredProfile","ComplexGrid","justify","paragraph","CardActionArea","handleClickCreateGame","CardMedia","alt","handleClickFindGame","handleClickRandomGame","handleClickLearnGame","handleClickPuzzleRush","dchighscores","dividerFullWidth","LoginModal","loginGoogle","href","closeLoginModal","class","LoggedInUser","loggedin","profilePicture","SignInButton","textToShow","PuzzleRushDifficultyModal","handleClickPuzzleRushModal","action","isLoading","handleClickEasyPuzzleRush","handleClickMediumPuzzleRush","handleClickHardPuzzleRush","handleClickExHardPuzzleRush","handleChange","wrap","CircularProgress","FormControl","FormLabel","RadioGroup","Radio","handleClickRandomGameModal","handleClickEasy","handleClickMedium","handleClickHard","handleClickExHard","ProfilePageCreatedGamesDetails","handleClickPlayGame","ProfilePageSolutionDetails","solution","WinnerCreated","WinnerUsername","ProfilePage","useState","error","setError","expandedGame","setExpandedGame","expandedHighscores","setExpandedHighscores","puzzlerushview","newuser","gamesview","ExpansionPanel","expanded","panel","isExpandedGame","ExpansionPanelSummary","expandIcon","aria-controls","ExpansionPanelDetails","solutionsview","isExpandedHighScores","WinnerUserId","userID","maxeasy","averageeasy","averagediffeasy","maxmedium","averagemedium","averagediffmedium","maxhard","averagehard","averagediffhard","maxexhard","averageexhard","averagediffexhard","RandomGamePage","PuzzleRushPage","LessonsPage","learngameslist","DailyChallengePage","dailyChallengeGameslist","AboutUs","ShowDailyPuzzleHistory","size","handleDailyPuzzleHistoryClick","DailyChallengeHistory","expandedPanel","setExpandedPanel","dailychallengehistory","isExpanded","DailyChallengeHistoryAnswersPage","LoadingPage","App","handleDrawerClose","boolean","isOpen","PageSelected","DailyChallenge","handleDrawerOpen","SignInButtonPressed","showLoginModal","showRandomGameModal","showPuzzleRushModal","handleClickDailyChallengeHistory","historydata","challengeHistoryData","dailychallengehistoryloaded","closePuzzleRushLoginModal","closeRandomGameLoginModal","handleClickProfile","profileData","profileDataloaded","handleHomePageClick","handleClickAboutUs","handleMobileMenuClose","mobileAnchorEl","mobileMenuOpen","showPage","handleMobileMenuOpen","token","linedir","LineDirFlag","createMuiTheme","teal","main","AppBar","clsx","appBar","appBarShift","Toolbar","menuButton","hide","noWrap","grow","sectionDesktop","sectionMobile","aria-haspopup","anchorOrigin","vertical","horizontal","transformOrigin","Badge","badgeContent","Drawer","drawer","anchor","drawerPaper","drawerHeader","drawerHeaderLeft","drawerHeaderRight","useTheme","button","ListItemIcon","contentShift","RandomGameDifficultyModal","transitions","create","easing","sharp","duration","leavingScreen","easeOut","enteringScreen","mixins","toolbar","breakpoints","up","toggleBorder","gradient","hostname","match","ReactDOM","render","BrowserRouter","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"js/main.949c1c23.chunk.js","sourcesContent":["import React from 'react';\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nexport default function LearnGameItems(props) {\r\n    const handleClick = () => {\r\n        props.handleClickGame(props.index)\r\n    }\r\n    if (props.selected === props.index) {\r\n        return (\r\n            <Button\r\n                variant=\"contained\" color=\"primary\"\r\n                aria-label=\"vertical outlined primary button group\"\r\n                onClick={handleClick}\r\n            >\r\n                {props.name}\r\n            </Button>\r\n        )\r\n    }\r\n    else {\r\n        return (\r\n            <Button\r\n                variant=\"contained\"\r\n                onClick={handleClick}\r\n                aria-label=\"vertical outlined primary button group\"\r\n            >\r\n                {props.name}\r\n            </Button>\r\n        )\r\n    }\r\n\r\n}","export const UP = 'UP';\r\nexport const DOWN = 'DOWN';\r\nexport const LEFT = 'LEFT';\r\nexport const RIGHT = 'RIGHT';\r\nexport const MAX_WIDTH = 16*40;\r\nexport const MAX_HEIGHT = 16*40;\r\n\r\nexport const MOBILE_INNER_SCREEN_WIDTH = '960';\r\n\r\nexport const SQUARE_CORE_COLOR = '#e1e1e1';\r\nexport const SQUARE_INNER_COLOR = '#c4a1a1';\r\nexport const SQUARE_OUTSIDE_COLOR = '#807878';\r\n\r\nexport const ROBOT_GREEN = '#228b22';\r\nexport const ROBOT_BLUE = '#4169e1';\r\nexport const ROBOT_YELLOW = '#ff8c00';\r\nexport const ROBOT_RED = '#b22222';\r\nexport const ROBOT_PURPLE = '#9c1aff';\r\nexport const ROBOT_ORANGE = '#e66000';\r\nexport const ROBOT_PINK = '#ff85c2';\r\n\r\nexport const SELECTED_ROBOT = '#ffd700';\r\nexport const LINE_INDICATOR_COLOR = 'red';\r\n\r\nexport const GOAL_IMAGE = '/static/images/swirl.png';\r\nexport const GREEN_UP_PICTURE = '/static/images/Green_Up.png';\r\n\r\nexport const DIRECTION_MAP_IMAGES = {\r\n    yellow: {\r\n        UP: '/static/images/yellow_up.png',\r\n        DOWN: '/static/images/yellow_down.png',\r\n        LEFT: '/static/images/yellow_left.png',\r\n        RIGHT: '/static/images/yellow_right.png',\r\n    },\r\n    red:  {\r\n        UP: '/static/images/red_up.png',\r\n        DOWN: '/static/images/red_down.png',\r\n        LEFT: '/static/images/red_left.png',\r\n        RIGHT: '/static/images/red_right.png',\r\n    },\r\n    green:  {\r\n        UP: '/static/images/green_up.png',\r\n        DOWN: '/static/images/green_down.png',\r\n        LEFT: '/static/images/green_left.png',\r\n        RIGHT: '/static/images/green_right.png',\r\n    },\r\n    blue:  {\r\n        UP: '/static/images/blue_up.png',\r\n        DOWN: '/static/images/blue_down.png',\r\n        LEFT: '/static/images/blue_left.png',\r\n        RIGHT: '/static/images/blue_right.png',\r\n    },\r\n}","import React from 'react';\r\nimport {DIRECTION_MAP_IMAGES} from '../constants/constants';\r\n\r\nconst style = () => {\r\n    return {\r\n            width: '15%',\r\n            float: 'left',\r\n            display: 'contents'\r\n        };\r\n    };\r\n\r\n\r\nclass MovesView extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div style={style()}><h3>Moves: {this.props.moveHistory.length}</h3>\r\n                {\r\n                    this.props.moveHistory.map(move =>\r\n                        <img src={DIRECTION_MAP_IMAGES[this.props.playerState[move.robot].colorSignifier][move.dir]}/>\r\n                    )\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MovesView;","import React from 'react';\r\nimport {SQUARE_OUTSIDE_COLOR,SQUARE_INNER_COLOR,SQUARE_CORE_COLOR} from '../constants/constants';\r\n\r\n\r\nconst styleoutside = ({dimension,position}) => {\r\n    const dim = dimension + 'px';\r\n    return {\r\n        width: dim,\r\n        height: dim,\r\n        backgroundColor: SQUARE_OUTSIDE_COLOR,\r\n        position: 'absolute',\r\n        top: position.top * dimension + 'px',\r\n        left: position.left * dimension + 'px',\r\n    };\r\n};\r\n\r\nconst styleinside = ({dimension,position}) => {\r\n    const dim = (dimension - 4) + 'px';\r\n    return {\r\n        width: dim,\r\n        height: dim,\r\n        backgroundColor: SQUARE_INNER_COLOR,\r\n        position: 'absolute',\r\n        top: 2 + 'px',\r\n        left: 2 + 'px',\r\n    };\r\n};\r\n\r\nconst styleinside2 = ({dimension,position}) => {\r\n    const dim = (dimension-4)/2 + 'px';\r\n    return {\r\n        width: dim,\r\n        height: dim,\r\n        backgroundColor: SQUARE_CORE_COLOR,\r\n        position: 'absolute',\r\n        top: (dimension-4)/4 + 'px',\r\n        left: (dimension-4)/4 + 'px',\r\n    };\r\n};\r\n\r\nclass Square extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <div onClick={this.handleClick} style={styleoutside(this.props)}>\r\n                <div style={styleinside(this.props)}>\r\n                    <div style={styleinside2(this.props)}/>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Square;\r\n\r\n\r\n//<div style=\"background-Color: black;width: 40px;height: 40px; position: absolute;\">\r\n//  <div style=\"background-Color: white; width: 36px; height: 36px; top: 2px; left: 2px;position: absolute;\">\r\n//      <div style=\"background-Color: grey; width: 18px; height: 18px; top: 9px; left: 9px;position: absolute;\">\r\n//      </div>\r\n//  </div>\r\n//</div>","import React from 'react';\r\n\r\nconst style = (width,height) => {\r\n    const widthset = width + 'px';\r\n    const heightset = height + 'px';\r\n    return {\r\n        width: widthset,\r\n        height: heightset,\r\n        border: '1px solid black',\r\n        position: 'relative',\r\n        margin: '0 auto',\r\n        overflow: 'hidden'\r\n    };\r\n};\r\n\r\nexport default ({ width,height, children }) => (\r\n    <div id=\"MainGameBoard\" style={style(width,height)}>\r\n        {children}\r\n    </div>\r\n)","import React from 'react';\r\nimport {UP,DOWN,LEFT,RIGHT,SELECTED_ROBOT} from '../constants/constants';\r\n\r\nimport Draggable from 'react-draggable';\r\n\r\nconst styleoutside = ({dimension,position}) => {\r\n    const dim = dimension + 'px';\r\n    return {\r\n        width: dim,\r\n        height: dim,\r\n        position: 'absolute',\r\n        top: position.top * dimension + 'px',\r\n        left: position.left * dimension + 'px',\r\n        transition: 'all 0.1s ease'\r\n    };\r\n};\r\n\r\nconst styleoutsidedraggable = ({dimension,position}) => {\r\n    const dim = dimension + 'px';\r\n    return {\r\n        width: dim,\r\n        height: dim,\r\n        position: 'absolute',\r\n        transition: 'all 0.1s ease'\r\n    };\r\n};\r\n\r\n\r\nconst styleinside = ({dimension}) => {\r\n    const dim = (dimension - 4) + 'px';\r\n    return {\r\n        width: dim,\r\n        height: dim,\r\n        position: 'absolute',\r\n        top: 2 + 'px',\r\n        left: 2 + 'px',\r\n        transition: 'all 0.1s ease'\r\n    };\r\n};\r\n\r\nconst styleinside2 = ({dimension,color,index,selected}) => {\r\n    const dim = ((dimension-4)*3)/4 + 'px';\r\n    var selectedColor = undefined;\r\n    var borderStyle = \"none\";\r\n    if (index === selected) {\r\n        selectedColor = SELECTED_ROBOT;\r\n        borderStyle = \"solid\";\r\n    }\r\n    return {\r\n        width: dim,\r\n        height: dim,\r\n        backgroundColor: color,\r\n        borderStyle: borderStyle,\r\n        borderColor: selectedColor,\r\n        position: 'absolute',\r\n        borderRadius: '50%',\r\n        top: (dimension-4)/8 + 'px',\r\n        left: (dimension-4)/8 + 'px',\r\n        transition: 'all 0.1s ease'\r\n    };\r\n};\r\n\r\n\r\nclass Robot extends React.Component {\r\n\r\n    handleClick = () => {\r\n        this.props.onClick(this.props.index);\r\n    };\r\n\r\n    onStopDragHandler = (e, position) => {\r\n        this.props.onStopDragHandler(position,this.props.index);\r\n    }\r\n\r\n\r\n    handleCreateMode = () => {\r\n        if (this.props.isCreateMode === 'Yes' && this.props.buildMode) {\r\n            return (\r\n            <Draggable position={{x: this.props.position.left * this.props.dimension, y:this.props.position.top*this.props.dimension}} grid={this.props.draggableGrid} onStop={this.onStopDragHandler} bounds=\"parent\">\r\n                <div onClick={this.handleClick} style={styleoutsidedraggable(this.props)}>\r\n                    <div style={styleinside(this.props)}>\r\n                        <div style={styleinside2(this.props)}/>\r\n                    </div>\r\n                </div>\r\n            </Draggable>\r\n            )\r\n        }\r\n        else {\r\n            return(\r\n            <div onClick={this.handleClick} style={styleoutside(this.props)}>\r\n                <div style={styleinside(this.props)}>\r\n                    <div style={styleinside2(this.props)}/>\r\n                </div>\r\n            </div>\r\n            )\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n    render () {\r\n        return (\r\n            this.handleCreateMode()\r\n        );\r\n    }\r\n}\r\n\r\nexport default Robot;\r\n\r\n\r\n//<div style=\"background-Color: black;width: 40px;height: 40px; position: absolute;\">\r\n//  <div style=\"background-Color: grey; width: 36px; height: 36px; top: 2px; left: 2px;position: absolute;\">\r\n//      <div style=\"background-Color: blue; width: 18px; height: 18px; top: 9px; left: 9px;position: absolute; border-radius: 50%\">\r\n//      </div>\r\n//  </div>\r\n//</div>","import React from 'react';\r\n\r\nconst style = ({orientation,dimension,position,opacity,onClick}) => {\r\n    const wallThickness = (dimension/4) + 'px';\r\n    const wallOffset = (dimension/4)/2\r\n    if (orientation=='horizontal') {\r\n        var width = dimension + 'px';\r\n        var height = wallThickness;\r\n        var top = ((position.top * dimension) - wallOffset) + 'px';\r\n        var left = position.left * dimension + 'px';\r\n    }\r\n    else {\r\n        var width = wallThickness;\r\n        var height = dimension + 'px'\r\n        var top = position.top * dimension + 'px';\r\n        var left = ((position.left * dimension) - wallOffset) + 'px';\r\n    }\r\n    return {\r\n        width: width,\r\n        height: height,\r\n        backgroundColor: 'black',\r\n        position: 'absolute',\r\n        top: top,\r\n        left: left,\r\n        opacity: opacity,\r\n    };\r\n};\r\n\r\nclass Wall extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n\r\n    handleClick = () => {\r\n        if (this.props.opacity == 1) {\r\n            this.props.onClick(0,this.props.orientation,this.props.position.top,this.props.position.left);\r\n        }\r\n        else {\r\n            this.props.onClick(1,this.props.orientation,this.props.position.top,this.props.position.left);\r\n        }\r\n    }\r\n    render () {\r\n        return (\r\n            <div style={style(this.props)} onClick={this.handleClick}/>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Wall;\r\n\r\n\r\n//<div style=\"background-Color: black;width: 40px;height: 40px; position: absolute;\">\r\n//  <div style=\"background-Color: white; width: 36px; height: 36px; top: 2px; left: 2px;position: absolute;\">\r\n//      <div style=\"background-Color: grey; width: 18px; height: 18px; top: 9px; left: 9px;position: absolute;\">\r\n//      </div>\r\n//  </div>\r\n//</div>","import React from 'react';\r\nimport {SQUARE_OUTSIDE_COLOR,SQUARE_INNER_COLOR,SQUARE_CORE_COLOR,GOAL_IMAGE} from '../constants/constants';\r\nimport Draggable from 'react-draggable';\r\n\r\n\r\nconst style = ({dimension,position}) => {\r\n    const dim = dimension + 'px';\r\n    return {\r\n        width: dim,\r\n        height: dim,\r\n        position: 'absolute',\r\n        top: position.top * dimension + 'px',\r\n        left: position.left * dimension + 'px',\r\n        userSelect: 'none'\r\n    };\r\n};\r\n\r\nconst styledragable = ({dimension,position}) => {\r\n    const dim = dimension + 'px';\r\n    return {\r\n        width: dim,\r\n        height: dim,\r\n        position: 'absolute',\r\n        userSelect: 'none'\r\n    };\r\n};\r\n\r\n\r\n\r\nexport default function Goal(props) {\r\n    if (props.isCreateMode === 'Yes'  && props.buildMode) {\r\n        const onStopDragHandler = (e, position) => {\r\n            props.onStopDragHandler(position);\r\n        }\r\n        return(\r\n        <Draggable position={{x:props.position.left * props.dimension,y: props.position.top * props.dimension}} bounds=\"parent\" grid={props.draggableGrid} onStop={onStopDragHandler}>\r\n            <img src={GOAL_IMAGE} style={styledragable(props)}/>\r\n        </Draggable>\r\n        )\r\n    }\r\n    else {\r\n        return(<img src={GOAL_IMAGE} style={style(props)}/>)\r\n    }\r\n}\r\n\r\n\r\n//<div style=\"background-Color: black;width: 40px;height: 40px; position: absolute;\">\r\n//  <div style=\"background-Color: white; width: 36px; height: 36px; top: 2px; left: 2px;position: absolute;\">\r\n//      <div style=\"background-Color: grey; width: 18px; height: 18px; top: 9px; left: 9px;position: absolute;\">\r\n//      </div>\r\n//  </div>\r\n//</div>","import React from 'react';\r\nimport {UP,DOWN,LEFT,RIGHT} from '../constants/constants';\r\n\r\nconst style = ({buildMode,show,dimension, dir, position, endPosition, color}) => {\r\n    var width = 0;\r\n    var height = 0;\r\n    var top = 0;\r\n    var left = 0;\r\n    if (position !== undefined && endPosition !== undefined) {\r\n        if (dir === LEFT) {\r\n            top = endPosition.top*dimension;\r\n            left = endPosition.left*dimension;\r\n            width = (position.left*dimension) - (endPosition.left*dimension) + 'px';\r\n            height = dimension + 'px';\r\n        } else if (dir === RIGHT) {\r\n            top = position.top*dimension;\r\n            left = position.left*dimension + dimension;\r\n            width = (endPosition.left*dimension) - (position.left*dimension) + 'px';\r\n            height = dimension + 'px';\r\n        } else if (dir === UP) {\r\n            top = endPosition.top*dimension;\r\n            left = endPosition.left*dimension;\r\n            width = dimension + 'px';\r\n            height = (position.top*dimension) - (endPosition.top*dimension) + 'px';\r\n        } else {\r\n            top = position.top*dimension + dimension;\r\n            left = position.left*dimension;\r\n            width = dimension + 'px';\r\n            height = (endPosition.top*dimension) - (position.top*dimension) + 'px'\r\n        }\r\n    }\r\n    return {\r\n        width: width,\r\n        height: height,\r\n        backgroundColor: color,\r\n        position: 'absolute',\r\n        top: top + 'px',\r\n        left: left + 'px',\r\n        opacity: show ? '0.5' : '0.0',\r\n        transition: 'all 0.1s ease',\r\n    };\r\n};\r\n\r\n\r\n\r\nexport default (props) => {\r\n    const handleClick = () => {\r\n        props.handleClick(props.dir)\r\n    }\r\n    if (props.buildMode === 'undefined' || !props.buildMode)\r\n    {\r\n        return (\r\n            <div onClick={handleClick} style={style(props)}/>\r\n        );\r\n    }\r\n    else {\r\n        return null\r\n    }\r\n}","export default (obj, src) => {\r\n    for (var key in src) {\r\n        if (src.hasOwnProperty(key)) obj[key] = src[key];\r\n    }\r\n    return obj;\r\n}","import React from 'react';\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\n\r\nconst buttonpanel = () => {\r\n    return {\r\n        marginRight: '5px',\r\n        marginTop: '15px',\r\n        marginBottom: '15px',\r\n        float: 'left',\r\n    };\r\n}\r\nclass YouWinModal extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Dialog onClose={this.handleClose} container={() => document.getElementById('MainGameBoard')} style={{position: 'absolute'}} BackdropProps={{ style: { position: 'absolute' } }}\r\n                    aria-labelledby=\"customized-dialog-title\"\r\n                    open={this.props.show}\r\n                    maxWidth={\"xs\"}\r\n            >\r\n                <DialogTitle id=\"customized-dialog-title\" onClose={this.handleClose}>You Win!</DialogTitle>\r\n                <DialogContent dividers>\r\n                    <div>\r\n                        You used {this.props.numMoves} Moves!\r\n                    </div>\r\n                    <br/>\r\n                    <TextField id={\"namesubmitHS\"} label={\"Username\"} defaultValue={this.props.username}/>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button variant=\"contained\" color=\"secondary\" onClick={this.props.submitAnswer}>Submit Highscore</Button>\r\n                    <Button onClick={this.props.resetPuzzle}>Reset</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        )\r\n    }\r\n}\r\n\r\nexport default YouWinModal;","import React from 'react';\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport LearnGameItems from '../components/LearnGameItems';\r\n\r\n\r\nconst buttonpanel = () => {\r\n    return {\r\n        marginRight: '5px',\r\n        marginTop: '15px',\r\n        marginBottom: '15px',\r\n        float: 'left',\r\n    };\r\n}\r\nclass YouWinDailySingleModal extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <Dialog onClose={this.handleClose} container={() => document.getElementById('MainGameBoard')} style={{position: 'absolute'}} BackdropProps={{ style: { position: 'absolute' } }}\r\n                    aria-labelledby=\"customized-dialog-title\"\r\n                    open={this.props.show}\r\n                    maxWidth={\"xs\"}\r\n            >\r\n                <DialogTitle id=\"customized-dialog-title\" onClose={this.handleClose}>Completed!</DialogTitle>\r\n                <DialogContent dividers>\r\n                    <Typography variant=\"body1\">\r\n                        You used {this.props.numMoves} Moves, for this puzzle.\r\n                    </Typography>\r\n                    <br/>\r\n                    <Typography variant=\"body1\">\r\n                        Total Moves: {this.props.totalMoves}\r\n                    </Typography>\r\n                    <br/>\r\n                    <Typography variant=\"body1\">\r\n                        Finish all puzzles to get submit your score!\r\n                    </Typography>\r\n                    <br/>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button variant=\"contained\" color=\"primary\" onClick={this.props.undoMove}>Undo Move</Button>\r\n                    <Button variant=\"contained\" color=\"secondary\" onClick={this.props.moveNextPuzzle}>Next Puzzle</Button>\r\n                    <Button onClick={this.props.resetPuzzle}>Reset</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        )\r\n    }\r\n}\r\n\r\nexport default YouWinDailySingleModal;","import React from 'react';\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\n\r\nconst buttonpanel = () => {\r\n    return {\r\n        marginRight: '5px',\r\n        marginTop: '15px',\r\n        marginBottom: '15px',\r\n        float: 'left',\r\n    };\r\n}\r\nclass YouWinDailyFinalModal extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    handleClickSubmitGame = () => {\r\n        this.props.submitAnswer(this.props.robotPosition)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Dialog onClose={this.handleClose} container={() => document.getElementById('MainGameBoard')} style={{position: 'absolute'}} BackdropProps={{ style: { position: 'absolute' } }}\r\n                    aria-labelledby=\"customized-dialog-title\"\r\n                    open={this.props.show}\r\n                    maxWidth={\"xs\"}\r\n            >\r\n                <DialogTitle id=\"customized-dialog-title\" onClose={this.handleClose}>You Completed the Challenge!</DialogTitle>\r\n                <DialogContent dividers>\r\n                    <div>\r\n                        You used {this.props.numMoves} Moves!\r\n                    </div>\r\n                    <br/>\r\n                    <TextField id={\"namesubmitHS\"} label={\"Username\"} defaultValue={this.props.username}/>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button variant=\"contained\" color=\"primary\" onClick={this.props.undoMove}>Undo Move</Button>\r\n                    <Button variant=\"contained\" color=\"secondary\" onClick={this.handleClickSubmitGame}>Submit Highscore</Button>\r\n                    <Button onClick={this.props.resetPuzzle}>Reset</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        )\r\n    }\r\n}\r\n\r\nexport default YouWinDailyFinalModal;","import React from 'react';\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\n\r\nconst buttonpanel = () => {\r\n    return {\r\n        marginRight: '5px',\r\n        marginTop: '15px',\r\n        marginBottom: '15px',\r\n        float: 'left',\r\n    };\r\n}\r\nclass AddPuzzleModal extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Dialog onClose={this.handleClose}\r\n                    aria-labelledby=\"customized-dialog-title\"\r\n                    open={this.props.show}\r\n                    maxWidth={\"xs\"}\r\n            >\r\n                <DialogTitle id=\"customized-dialog-title\" onClose={this.handleClose}>Submit Puzzle</DialogTitle>\r\n                <DialogContent dividers>\r\n                    <TextField id={\"namesubmit\"} label={\"Name of Puzzle\"} />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button variant=\"contained\" color=\"secondary\" onClick={this.props.submitPuzzle}>Submit Puzzle</Button>\r\n                    <Button onClick={this.props.resetPuzzle}>Reset</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddPuzzleModal;\r\n","import React from 'react';\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Switch from \"@material-ui/core/Switch\";\r\n\r\nconst buttonpanel = () => {\r\n    return {\r\n        float: 'left',\r\n    };\r\n}\r\n\r\nclass ToggleSettings extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    handleClick = event => {\r\n        this.props.onClick();\r\n    };\r\n\r\n\r\n    render() {\r\n        console.log(this.props.showColoredLineDirections)\r\n        return (\r\n            <div style={buttonpanel()}>\r\n                <FormControlLabel\r\n                    value=\"end\"\r\n                    control={<Switch color=\"primary\" onChange={this.handleClick}/>}\r\n                    label=\"Path Indicators\"\r\n                    checked={this.props.showColoredLineDirections}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ToggleSettings;","import React, { Component } from 'react'\r\n\r\nexport default class Timer extends Component {\r\n\r\n    state = {\r\n            minutes: 5,\r\n            seconds: 0,\r\n        }\r\n\r\n    componentDidMount() {\r\n        this.myInterval = setInterval(() => {\r\n            const { seconds, minutes } = this.state\r\n\r\n            if (seconds > 0) {\r\n                this.setState(({ seconds }) => ({\r\n                    seconds: seconds - 1\r\n                }))\r\n            }\r\n            if (seconds === 0) {\r\n                if (minutes === 0) {\r\n                    this.props.puzzleRushTimeUp();\r\n                    clearInterval(this.myInterval)\r\n                } else {\r\n                    this.setState(({ minutes }) => ({\r\n                        minutes: minutes - 1,\r\n                        seconds: 59\r\n                    }))\r\n                }\r\n            }\r\n        }, 1000)\r\n    }\r\n\r\n    timer = () => {\r\n        if (this.state.minutes === 0 && this.state.seconds === 0) {\r\n            return (<h2>Time is up!</h2>)\r\n        }\r\n        else {\r\n            return(\r\n                <h2>Time Remaining: {this.state.minutes}:{this.state.seconds < 10 ? `0${this.state.seconds}` : this.state.seconds}</h2>)\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.myInterval)\r\n    }\r\n\r\n    render() {\r\n        const { minutes, seconds } = this.state\r\n        return (\r\n            this.timer()\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from \"@material-ui/core/Button\";\r\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport ToggleSettings from \"../components/ToggleSettings\";\r\nimport Timer from \"../components/Timer\";\r\nimport Switch from \"@material-ui/core/Switch\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\n\r\nconst controlpanel = () => {\r\n    return {\r\n        marginRight: '10px',\r\n        marginTop: '25px',\r\n        marginBottom: '10px',\r\n        opacity: 1\r\n    };\r\n};\r\n\r\nconst buttonPanel = () => {\r\n    return {\r\n        display: 'inline-flex',\r\n        width: '200px',\r\n    }\r\n};\r\n\r\nconst valuetext = (value) => {\r\n    return value + 'px';\r\n};\r\n\r\n\r\nclass DisplayView extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n                        copyButtonText: \"Copy Puzzle Link\"\r\n                     };\r\n        this.state.uri = this.props.isDailyChallenge === 'Yes' ? 'dailychallenge' : this.props.uri;\r\n    }\r\n\r\n    isCreateMode = (createMode) => {\r\n        if (createMode === 'Yes') {\r\n            return (\r\n                <div>\r\n                    <Button color=\"secondary\" variant={\"outlined\"} fullWidth={true} onClick={this.handleCreateBoardClick}>Modify Board</Button>\r\n                    <FormControlLabel\r\n                        value=\"end\"\r\n                        control={<Switch color=\"primary\" checked={this.props.buildMode} onChange={this.props.toggleBuildMode}/>}\r\n                        label=\"Build Mode\"\r\n                            />\r\n                </div>\r\n                );\r\n        }\r\n        else {\r\n            return null\r\n        }\r\n    };\r\n\r\n    handleCreateBoardClick = event => {\r\n        return this.props.createBoardPressed('Create Board');\r\n    };\r\n\r\n    copyToClipboard = () => {\r\n        var dummy = document.createElement(\"textarea\");\r\n        document.body.appendChild(dummy);\r\n        dummy.value = 'http://' + window.location.host + '/play/' + this.state.uri;\r\n        dummy.select();\r\n        document.execCommand(\"copy\");\r\n        document.body.removeChild(dummy);\r\n        this.props.copiedClipboard();\r\n        var thisThing = this;\r\n        thisThing.setState({copyButtonText: \"Link Copied\"});\r\n        setTimeout(function () {\r\n            thisThing.setState({copyButtonText: \"Copy Puzzle Link\"})\r\n        }, 1500)\r\n    };\r\n\r\n    handleDimensionChange = (event,value) => {\r\n        document.getElementsByClassName(\"MuiSlider-thumb\")[0].blur();\r\n        var dimension = parseInt(value);\r\n        if (dimension.toString() === \"NaN\") {\r\n            dimension = 10;\r\n        } else if (dimension > 16) {\r\n            dimension = 16;\r\n        } else if (dimension < 2) {\r\n            dimension = 2;\r\n        }\r\n        this.props.DimensionChanged(dimension);\r\n    };\r\n\r\n    showPuzzleLink = () => {\r\n        if (this.props.createMode === 'Yes' || this.props.isPuzzleRush === 'Yes' || this.props.isLesson === 'Yes' || this.props.isDailyChallengeAnswers === 'Yes' || this.props.isDailyChallenge === 'Yes') {\r\n            return null;\r\n        }\r\n        else {\r\n                return(\r\n                     <div style={{paddingBottom: '10px'}}>\r\n                         <Button fullWidth={true} variant=\"contained\" color=\"secondary\" style={{marginRight: \"10px\"}}\r\n                                 onClick={this.copyToClipboard}>{this.state.copyButtonText}</Button>\r\n                     </div>\r\n                    )\r\n        }\r\n    }\r\n\r\n     render() {\r\n         return (\r\n             <div style={controlpanel()}>\r\n                {this.showPuzzleLink()}\r\n                 <Divider />\r\n                 <Typography\r\n                     color=\"textSecondary\"\r\n                     display=\"block\"\r\n                     variant=\"caption\"\r\n                     style={{paddingBottom: '10px'}}\r\n                 >\r\n                     Board Actions\r\n                 </Typography>\r\n                 <ButtonGroup fullWidth={true} color=\"secondary\" aria-label=\"contained primary button group\">\r\n                     <Button onClick={this.props.resetPuzzle}>Reset</Button>\r\n                     <Button onClick={this.props.undoMove}>Undo</Button>\r\n                 </ButtonGroup>\r\n                 {this.isCreateMode(this.props.createMode)}\r\n                 <Divider />\r\n                 <ToggleSettings showColoredLineDirections={this.props.showColoredLineDirections} onClick={this.props.toggleLineIndicators}/>\r\n                 <div style={buttonPanel()}>\r\n                     <Typography id=\"discrete-slider-small-steps\"\r\n                                 color=\"textSecondary\"\r\n                                 display=\"inline\"\r\n                                 gutterBottom>\r\n                         Size Of Board\r\n                     </Typography>\r\n                     <Slider\r\n                         onChangeCommitted={this.handleDimensionChange}\r\n                         getAriaValueText={valuetext}\r\n                         aria-labelledby=\"discrete-slider-small-steps\"\r\n                         step={1}\r\n                         marks\r\n                         min={2}\r\n                         max={16}\r\n                         defaultValue={this.props.squareSizeValue}\r\n                         valueLabelDisplay=\"auto\"\r\n                         id=\"sliderelement\"\r\n                     />\r\n                 </div>\r\n                 <Divider/>\r\n             </div>\r\n         )\r\n     }\r\n    }\r\n\r\nexport default DisplayView","import React from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { GoVerified } from \"react-icons/go\";\r\n\r\nconst styleouter = () => {\r\n    return {\r\n        marginleft: '15px',\r\n        float: 'left'\r\n    };\r\n}\r\n\r\nconst paperstyle = () => {\r\n    return {\r\n        marginBottom: '15px'\r\n    }\r\n}\r\n\r\nconst highscorestyle = highscore => {\r\n    return (\r\n                <Paper style={paperstyle()}elevation={3}>\r\n                    <Grid container spacing={0}>\r\n                        <Grid item xs={9}>\r\n                            <Typography color={'primary'} style={{float: 'left'}}>\r\n                                {highscore.comment}\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item xs={3}>\r\n                                {highscore.userid != 1 ? <GoVerified/> : null}\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                        <Typography color={'textSecondary'}>{highscore.numMoves}</Typography>\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                        <Typography color={'secondary'} variant={'body2'}>{highscore.created}</Typography>\r\n                        </Grid>\r\n                     </Grid>\r\n                </Paper>\r\n\r\n    )\r\n};\r\n\r\n\r\nexport default ({highscores}) => (\r\n    <Grid item xs={12} style={styleouter()}>\r\n        {\r\n            highscores.map(highscore =>\r\n                highscorestyle(highscore)\r\n            )\r\n        }\r\n    </Grid>\r\n)","import React from 'react';\r\nimport { FaCrown } from 'react-icons/fa';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { GoVerified } from \"react-icons/go\";\r\n\r\n\r\nconst styleouter = () => {\r\n    return {\r\n        marginTop: '30px',\r\n    };\r\n\r\n}\r\n\r\nconst styleelements = () => {\r\n    return {\r\n        marginBottom: '20px',\r\n        marginTop: '10px'\r\n    };\r\n\r\n}\r\n\r\nconst CrownCounter = highscore => {\r\n    var crowns = []\r\n    var i;\r\n    for (i=0; i<highscore.wins;i++) {\r\n        crowns.push(<FaCrown/>);\r\n    }\r\n    return (\r\n        <div>\r\n            {crowns}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst highscorestyle = highscore => {\r\n    return (<Grid item xs={12}>\r\n                <Paper elevation={3}>\r\n                    <Grid container spacing={0}>\r\n                        <Grid item xs={9}>\r\n                            <Typography color={'primary'} style={{float: 'left'}}>\r\n                                {highscore.name}\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item xs={3}>\r\n                                {highscore.wins == 0 || highscore.wins == null ? null : CrownCounter(highscore) }\r\n                                {highscore.user_id != 1 ? <GoVerified/> : null}\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                        <Typography color={'textSecondary'}>{highscore.score}</Typography>\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                        <Typography color={'secondary'} variant={'body2'}>{highscore.submitted}</Typography>\r\n                        </Grid>\r\n                     </Grid>\r\n                </Paper>\r\n            </Grid>\r\n\r\n    )\r\n};\r\n\r\n\r\nexport default ({highscores}) => (\r\n    <Grid style={styleouter()} container direction={'column'} spacing={1}>\r\n        {\r\n                highscores.map(highscore =>\r\n                    highscorestyle(highscore)\r\n                )\r\n        }\r\n    </Grid>\r\n)","import React from 'react';\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Input from \"@material-ui/core/Input\";\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\n\r\nclass PuzzleRushWinModal extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    handleClose = () => {\r\n        this.props.show = false;\r\n    };\r\n\r\n    render () {\r\n        return (\r\n            <Dialog onClose={this.handleClose}\r\n                    aria-labelledby=\"customized-dialog-title-2\"\r\n                    open={this.props.show}\r\n                    maxWidth={\"xs\"}\r\n                    fullWidth={true}\r\n            >\r\n                <DialogTitle id=\"customized-dialog-title-2\" onClose={this.handleClose}>Puzzle Rush - {this.props.difficulty}</DialogTitle>\r\n                <DialogContent dividers>\r\n                      <Grid container spacing={2}>\r\n                        <Grid item xs={12} md={6}>\r\n                          <Typography variant=\"h6\">\r\n                            Statistics\r\n                          </Typography>\r\n                          <div>\r\n                            <List dense={true}>\r\n\r\n                                <ListItem>\r\n                                  <ListItemText\r\n                                    primary=\"Number of Puzzles Completed\"\r\n                                    secondary={this.props.numPuzzlesCompleted}\r\n                                  />\r\n                                </ListItem>\r\n                                <ListItem>\r\n                                  <ListItemText\r\n                                    primary=\"Average time Per Puzzle\"\r\n                                    secondary={this.props.averageTime}\r\n                                  />\r\n                                </ListItem>\r\n                                <ListItem>\r\n                                  <ListItemText\r\n                                    primary=\"Average Moves per Puzzle\"\r\n                                    secondary={this.props.averageMoves}\r\n                                  />\r\n                                </ListItem>\r\n                                <ListItem>\r\n                                  <ListItemText\r\n                                    primary=\"Difference from most optimal Solution\"\r\n                                    secondary={this.props.differenceOptimal}\r\n                                  />\r\n                                </ListItem>\r\n                                <ListItem>\r\n                                  <ListItemText\r\n                                    primary=\"Moves Per Second\"\r\n                                    secondary={this.props.movesPerSecond}\r\n                                  />\r\n                                </ListItem>\r\n                            </List>\r\n                          </div>\r\n                        </Grid>\r\n                      </Grid>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button variant=\"contained\" color=\"secondary\" onClick={this.props.playPuzzleRushAgain}>Play Again!</Button>\r\n                    <Button onClick={this.props.closeModal}>Close</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        )\r\n    };\r\n\r\n\r\n}\r\n\r\nexport default PuzzleRushWinModal;\r\n\r\n","import React from 'react';\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport {\r\n    LEFT,\r\n    RIGHT,\r\n    UP,\r\n    DOWN,\r\n    MAX_WIDTH,\r\n    MAX_HEIGHT,\r\n    ROBOT_BLUE,\r\n    ROBOT_GREEN,\r\n    ROBOT_RED,\r\n    ROBOT_YELLOW,\r\n    GREEN_UP_PICTURE,\r\n    DIRECTION_MAP_IMAGES,\r\n    LINE_INDICATOR_COLOR\r\n} from '../../constants/constants';\r\n\r\n\r\n\r\nconst buttonpanel = () => {\r\n    return {\r\n        marginRight: '5px',\r\n        marginTop: '15px',\r\n        marginBottom: '15px',\r\n        float: 'left',\r\n    };\r\n}\r\nclass RandomGameStatsModal extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            answers: null,\r\n        }\r\n    }\r\n\r\n    showStatsModal = () => {\r\n        this.props.handleShowRandomAnswers()\r\n        this.setState({\r\n            answers: this.props.lowestMoveSequence\r\n        })\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <Dialog onClose={this.handleClose} container={() => document.getElementById('MainGameBoard')} style={{position: 'absolute'}} BackdropProps={{ style: { position: 'absolute' } }}\r\n                    aria-labelledby=\"customized-dialog-title\"\r\n                    open={this.props.show}\r\n                    maxWidth={\"xs\"}\r\n            >\r\n                <DialogTitle id=\"customized-dialog-title-random\" onClose={this.handleClose}>You Win!</DialogTitle>\r\n                <DialogContent dividers>\r\n                    <div>\r\n                        You used {this.props.numMoves} Moves!\r\n                    </div>\r\n                    <br/>\r\n                    <div>\r\n                        lowest possible moves: {this.props.lowestMoves}\r\n                    </div>\r\n                    {this.state.answers}\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button variant=\"contained\" color=\"secondary\" onClick={this.showStatsModal}>Show Puzzle Answers</Button>\r\n                    <Button onClick={this.props.resetPuzzle}>Reset</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        )\r\n    }\r\n}\r\n\r\nexport default RandomGameStatsModal;","import React from 'react';\r\nimport CloseIcon from '@material-ui/icons/Close'\r\n\r\nexport default function CloseIconWithOnClick(props) {\r\n    const handleClose = () => {\r\n        props.handleClose(props.index);\r\n    }\r\n    return (<CloseIcon onMouseDown={handleClose}/>\r\n    )\r\n}","import React from 'react';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport FeedbackIcon from '@material-ui/icons/Feedback'\r\nimport CloseIcon from '@material-ui/icons/Close'\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\r\nimport CloseIconWithOnClick from './CloseIconWithOnClick'\r\n\r\nexport default function Descriptionlist(props) {\r\n    return(\r\n            <List>\r\n              {\r\n                  props.tipsText.map((text,index) =>\r\n                    <ListItem>\r\n                      <div>\r\n                        {text}\r\n                      </div>\r\n                      <ListItemSecondaryAction>\r\n                        <IconButton edge=\"end\" aria-label=\"delete\">\r\n                          <CloseIconWithOnClick index={index} handleClose={props.handleCloseToolTips}/>\r\n                        </IconButton>\r\n                      </ListItemSecondaryAction>\r\n                    </ListItem>\r\n                  )\r\n              }\r\n            </List>\r\n    )\r\n}","import React from 'react';\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nconst buttonpanel = () => {\r\n    return {\r\n        marginRight: '5px',\r\n        marginTop: '15px',\r\n        marginBottom: '15px',\r\n        float: 'left',\r\n    };\r\n}\r\nclass YouWinLessonModal extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Dialog onClose={this.handleClose} container={() => document.getElementById('MainGameBoard')} style={{position: 'absolute'}} BackdropProps={{ style: { position: 'absolute' } }}\r\n                    aria-labelledby=\"customized-dialog-title\"\r\n                    open={this.props.show}\r\n                    maxWidth={\"xs\"}\r\n            >\r\n                <DialogTitle id=\"customized-dialog-title\" onClose={this.handleClose}>You Win!</DialogTitle>\r\n                <DialogContent dividers>\r\n                    <div>\r\n                        You used {this.props.numMoves} Moves!\r\n                    </div>\r\n                    <br/>\r\n                    <Typography> You completed the Lesson! Move on to the next one!\r\n                    </Typography>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={this.props.resetPuzzle}>Reset</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        )\r\n    }\r\n}\r\n\r\nexport default YouWinLessonModal;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    minWidth: 275,\r\n  },\r\n  bullet: {\r\n    display: 'inline-block',\r\n    margin: '0 2px',\r\n    transform: 'scale(0.8)',\r\n  },\r\n  title: {\r\n    fontSize: 14,\r\n  },\r\n  pos: {\r\n    marginBottom: 12,\r\n  },\r\n});\r\n\r\nexport default function ShowDailyChallengeScoresCard(props) {\r\n  const classes = useStyles();\r\n  const bull = <span className={classes.bullet}>•</span>;\r\n\r\n  return (\r\n    <Card className={classes.root} variant=\"outlined\">\r\n      <CardContent>\r\n        <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\r\n          {props.name}\r\n        </Typography>\r\n        <Typography variant=\"h5\" component=\"h2\">\r\n          {props.bestScore}\r\n        </Typography>\r\n        <Typography className={classes.pos} color=\"textSecondary\">\r\n          This Puzzle Moves\r\n        </Typography>\r\n        <Typography variant=\"body2\" component=\"p\">\r\n          {props.MovesforPuzzle}\r\n          <br/>\r\n          {props.MoveSequence}\r\n          <br />\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}","import React from 'react';\r\nimport MovesView from '../components/MovesView';\r\nimport ShowDailyChallengeScoreCard from '../components/ShowDailyChallengeScoresCard'\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst stylebelow = () => {\r\n    return {\r\n        marginTop: '40px'\r\n    }\r\n}\r\n\r\nclass DailyChallengeHistoryData extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Typography style={stylebelow()} variant=\"h4\"> {this.props.difficultyforPuzzle} </Typography>\r\n                <ShowDailyChallengeScoreCard\r\n                    name={\"Robit God\"}\r\n                    bestScore={this.props.bestScore}\r\n                    MovesforPuzzle={this.props.lowestMovesforPuzzle}\r\n                    MoveSequence={this.props.lowestMoveSequence}\r\n                />\r\n                <ShowDailyChallengeScoreCard\r\n                    name={this.props.nameSubmitted}\r\n                    bestScore={this.props.scoreSubmitted}\r\n                    MovesforPuzzle={this.props.playerMovedSequence.length}\r\n                    MoveSequence={<MovesView\r\n                                        moveHistory={this.props.playerMovedSequence} playerState={[{colorSignifier: \"blue\"},{colorSignifier: \"green\"},{colorSignifier: \"red\"},{colorSignifier: \"yellow\"}]}\r\n                                  />}\r\n                 />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default DailyChallengeHistoryData;","import extend from '../constants/extend';\r\nimport {LEFT,RIGHT,UP,DOWN,MAX_WIDTH,MAX_HEIGHT,ROBOT_BLUE,ROBOT_GREEN,ROBOT_RED,ROBOT_YELLOW,GREEN_UP_PICTURE,DIRECTION_MAP_IMAGES} from '../constants/constants';\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*\r\nSTILL NEED TO CHECK LAST row\r\n*/\r\nconst checkDeadendHorizontal = (wallHorizontalList,WallVertToPlace,LastWall,width,height) => {\r\n    var indexX = WallVertToPlace.left;\r\n    var indexY = WallVertToPlace.top;\r\n    var isWallAbove = false;\r\n    wallHorizontalList.map(wall => {\r\n        if (wall.top == indexY && wall.left == indexX-1 && wall.opacity == 1) {\r\n            isWallAbove = true;\r\n        }\r\n    });\r\n    //var isWallAbove = (wallHorizontalList.find(wall => wall = {top: indexY-4, left: indexX -40}) !== undefined);\r\n    var isWallBeside = (LastWall.top == indexY && LastWall.left == (indexX-1) && LastWall.opacity == 1);\r\n    /*if ((isWallAbove && isWallBeside)) {\r\n        console.log(wallHorizontalList);\r\n        console.log(WallVertToPlace);\r\n        console.log(LastWall);\r\n    }*/\r\n\r\n    return !(isWallAbove && isWallBeside)\r\n}\r\n\r\n/*\r\nSTILL NEED TO CHECK last row of things bottom https://cdn.discordapp.com/attachments/551490947893035023/708384650187374642/unknown.png\r\n*/\r\n\r\nconst checkDeadendTop = (wallVerticleList, WallHorizToPlace,wallHorizList,width,height) => {\r\n    var indexX = WallHorizToPlace.left;\r\n    var indexY = WallHorizToPlace.top;\r\n    var isWallAbove = false;\r\n    wallHorizList.map(wall => {\r\n        if (wall.top == indexY-1 && wall.left == indexX && wall.opacity == 1) {\r\n            isWallAbove = true;\r\n        }\r\n    });\r\n    var isWallBesideLeft = false;\r\n    var isWallBesideRight = false;\r\n    wallVerticleList.map(wall => {\r\n        if (wall.top == indexY-1 && (wall.left == indexX) && wall.opacity == 1) {\r\n            isWallBesideLeft = true;\r\n        }\r\n        if (wall.top == indexY-1 && (wall.left == indexX+1) && wall.opacity == 1) {\r\n            isWallBesideRight = true;\r\n        }\r\n    });\r\n    return !((isWallAbove && (isWallBesideLeft || isWallBesideRight)) || (isWallBesideLeft && isWallBesideRight))\r\n}\r\n\r\n\r\nconst randomBoardPosition = (dontPlacePositions,width,height) => {\r\n    var tryAgain = 0;\r\n    var Y,X;\r\n    do {\r\n        tryAgain = 0;\r\n        Y = Math.floor(Math.random() * Math.floor(height));\r\n        X = Math.floor(Math.random() * Math.floor(width));\r\n        dontPlacePositions.map(position => {\r\n            if (Y == position.top && X == position.left) {\r\n                tryAgain = 1;\r\n            }\r\n        });\r\n    } while (tryAgain == 1);\r\n    return {top: Y,left: X};\r\n};\r\n\r\nexport default (width,height,randomPercent,type) => {\r\n    var boardState = [];\r\n    var wallVerticle = [{top: 0, left: 0}];\r\n    var wallHorizontal = [];\r\n    var playerState = [];\r\n    if (type === 'blank') {\r\n        var goal = {top: height-1, left: width-1};\r\n        var randompos1 = {top: 0,left: 0, color: ROBOT_BLUE, colorSignifier: 'blue'};\r\n        var randompos2 = {top: 0,left: 1, color: ROBOT_GREEN, colorSignifier: 'green'};\r\n        var randompos3 = {top: 1,left: 0, color: ROBOT_RED, colorSignifier: 'red'};\r\n        var randompos4 = {top: 1,left: 1, color: ROBOT_YELLOW, colorSignifier:'yellow'};\r\n    }\r\n    else {\r\n        var goal = {top:Math.floor(Math.random() * Math.floor(height)), left:Math.floor(Math.random() * Math.floor(width))};\r\n        var randomPositions = [goal];\r\n        for (var i=0;i<5;i++) {\r\n            randomPositions.push(randomBoardPosition(randomPositions,width,height));\r\n        }\r\n        var randompos1 = extend(randomPositions[1],{color: ROBOT_BLUE, colorSignifier: 'blue'});\r\n        var randompos2 = extend(randomPositions[2],{color: ROBOT_GREEN, colorSignifier: 'green'});\r\n        var randompos3 = extend(randomPositions[3],{color: ROBOT_RED, colorSignifier: 'red'});\r\n        var randompos4 = extend(randomPositions[4],{color: ROBOT_YELLOW, colorSignifier:'yellow'});\r\n    }\r\n    playerState.push(randompos1);\r\n    playerState.push(randompos2);\r\n    playerState.push(randompos3);\r\n    playerState.push(randompos4);\r\n    for (var i=0;i<width;i+=1) {\r\n        for (var j=0;j<height;j+=1) {\r\n            boardState.push({top: j,left: i});\r\n        }\r\n    }\r\n    for (var j=0;j<height;j+=1) {\r\n        for (var i=0;i<width;i+=1) {\r\n            if (i < 1) {\r\n                wallVerticle.push({top: j, left: i, opacity: 1});\r\n            }\r\n            else if (i==(width-1)) {\r\n                wallVerticle.push({top: j, left: i+1, opacity: 1});\r\n            }\r\n            if (j < 1) {\r\n                wallHorizontal.push({top: j,left: i, opacity: 1});\r\n            }\r\n            else if (j == (height-1)) {\r\n                wallHorizontal.push({top: j+1, left: i, opacity: 1});\r\n            }\r\n        }\r\n    }\r\n    for (var j=0;j<height;j+=1) {\r\n        for (var i=0;i<width;i+=1) {\r\n            if (i > 1 && i != (width-1) && Math.random() > randomPercent && checkDeadendHorizontal(wallHorizontal, {top: j, left: i}, wallVerticle[wallVerticle.length -1], width,height)) {\r\n                wallVerticle.push({top: j,left: i,opacity: 1});\r\n            }\r\n            else {\r\n                wallVerticle.push({top: j,left: i, opacity: 0})\r\n            }\r\n            if (j > 1 && j != (height-1) && Math.random() > randomPercent && checkDeadendTop(wallVerticle,{top: j,left:i}, wallHorizontal,width,height)) {\r\n                wallHorizontal.push({top: j,left: i, opacity: 1});\r\n            }\r\n            else {\r\n                wallHorizontal.push({top: j,left: i, opacity: 0});\r\n            }\r\n        }\r\n    }\r\n    return {\r\n        playerState: playerState,\r\n        gameWon: false,\r\n        boardState: boardState,\r\n        wallHorizontal: wallHorizontal,\r\n        wallVerticle: wallVerticle,\r\n        goal: goal,\r\n        playerStart: playerState.slice(),\r\n    };\r\n}\r\n","import React from 'react';\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Input from \"@material-ui/core/Input\";\r\n\r\nconst buttonpanel = () => {\r\n    return {\r\n        marginRight: '5px',\r\n        marginTop: '15px',\r\n        marginBottom: '15px'\r\n    };\r\n};\r\n\r\nconst labelStyle = () => {\r\n    return {\r\n        display: 'inline-block',\r\n        textAlign: 'right',\r\n        width: '140px',\r\n        paddingRight: '20px'\r\n    };\r\n};\r\n\r\n\r\nclass BoardResetModal extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    createBoardHandler = event => {\r\n        event.preventDefault();\r\n        var width = parseInt(document.getElementById(\"boardWidthInput\").value);\r\n        var height = parseInt(document.getElementById(\"boardHeightInput\").value);\r\n        var percent = parseInt(document.getElementById(\"boardRandomPercent\").value);\r\n\r\n        if (width.toString() === \"NaN\") {\r\n            width = 16;\r\n        } else if (width > 36) {\r\n            width = 36;\r\n        } else if (width < 4) {\r\n            width = 4;\r\n        }\r\n\r\n        if (height.toString() === \"NaN\") {\r\n            height = 16;\r\n        } else if (height.toString() === \"NaN\" || height > 36) {\r\n            height = 36;\r\n        } else if (height < 4) {\r\n            height = 4;\r\n        }\r\n\r\n        if (percent.toString() === \"NaN\") {\r\n            percent = 20;\r\n        } else if (percent < 0) {\r\n            percent = 0;\r\n        } else if (percent > 100) {\r\n            percent = 100;\r\n        }\r\n\r\n\r\n        this.props.createBoard(\r\n            width,\r\n            height,\r\n            (100 - percent)/100);\r\n    };\r\n\r\n    handleClose = () => {\r\n        this.props.show = false;\r\n    };\r\n\r\n    render () {\r\n        return (\r\n            <Dialog onClose={this.handleClose}\r\n                    aria-labelledby=\"customized-dialog-title\"\r\n                    open={this.props.show}\r\n                    maxWidth={\"xs\"}\r\n                    fullWidth={true}\r\n            >\r\n                <DialogTitle id=\"customized-dialog-title\" onClose={this.handleClose}>Create Board Settings</DialogTitle>\r\n                <DialogContent dividers>\r\n                    <div>\r\n                        <label style={labelStyle()} >{'Board Width:\\t\\t'}</label>\r\n                        <Input id={\"boardWidthInput\"} inputProps={{max: \"36\", min: \"4\", title:\"default is 16\"}} type={\"number\"} placeholder={\"4-36\"}/>\r\n                    </div>\r\n                    <div>\r\n                        <label style={labelStyle()}>{'Board Height:\\t\\t'}</label>\r\n                        <Input id={\"boardHeightInput\"} inputProps={{max: \"36\", min: \"4\", title:\"default is 16\"}} type={\"number\"} placeholder={\"4-36\"}/>\r\n                    </div>\r\n                    <div>\r\n                        <label style={labelStyle()}>{'Wall Spawn Rate:\\t'}</label>\r\n                        <Input id={\"boardRandomPercent\"} inputProps={{max: \"100\", min: \"0\", title:\"default is 20%\"}} type={\"number\"} placeholder={\"0-100%\"}/>\r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button variant=\"contained\" color=\"secondary\" onClick={this.createBoardHandler}>Create New Board</Button>\r\n                    <Button onClick={this.props.closeModal}>Close</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        )\r\n\r\n    };\r\n\r\n\r\n}\r\n\r\nexport default BoardResetModal;\r\n\r\n","import ButtonGroup from '@material-ui/core/ButtonGroup';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport React from 'react';\r\nimport axios from 'axios';\r\nimport {withRouter} from 'react-router';\r\nimport Draggable from 'react-draggable';\r\nimport LearnGameItems from '../components/LearnGameItems';\r\nimport MovesView from '../components/MovesView';\r\nimport Square from '../components/Square';\r\nimport Board from '../components/Board';\r\nimport Robot from '../components/Robot';\r\nimport Wall from '../components/Wall';\r\nimport Goal from '../components/Goal';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport ColoredLine from '../components/ColoredLine';\r\nimport extend from '../constants/extend';\r\nimport YouWinModal from '../components/YouWinModal';\r\nimport YouWinDailySingleModal from '../components/YouWinDailySingleModal';\r\nimport YouWinDailyFinalModal from '../components/YouWinDailyFinalModal';\r\nimport AddPuzzleModal from '../components/AddPuzzleModal';\r\nimport DisplayView from './DisplayView';\r\nimport HighScores from '../components/HighScores';\r\nimport DailyChallengeScores from '../components/DailyChallengeScores';\r\nimport PuzzleRushWinModal from '../containers/Modals/PuzzleRushFinishedModal';\r\nimport RandomGameStatsModal from '../containers/Modals/RandomGameStatsModal';\r\nimport DescriptionList from '../components/DescriptionList';\r\nimport YouWinLessonModal from '../components/YouWinLessonModal';\r\nimport DailyChallengeHistoryData from '../components/DailyChallengeHistoryData';\r\nimport Timer from \"../components/Timer\";\r\nimport {\r\n    LEFT,\r\n    RIGHT,\r\n    UP,\r\n    DOWN,\r\n    MAX_WIDTH,\r\n    MAX_HEIGHT,\r\n    ROBOT_BLUE,\r\n    ROBOT_GREEN,\r\n    ROBOT_RED,\r\n    ROBOT_YELLOW,\r\n    GREEN_UP_PICTURE,\r\n    DIRECTION_MAP_IMAGES,\r\n    LINE_INDICATOR_COLOR\r\n} from '../constants/constants';\r\nimport BoardGenerator from '../components/boardgenerator';\r\nimport BoardResetModal from \"./Modals/BoardResetModal\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nwindow.addEventListener(\"keydown\", function(e) {\r\n    // space and arrow keys\r\n    if(e.keyCode == 32 && e.target == document.body) {\r\n    e.preventDefault();\r\n  }\r\n    if([37, 38, 39, 40, 9,13].indexOf(e.keyCode) > -1) {\r\n        e.preventDefault();\r\n    }\r\n}, false);\r\n\r\nconst gamepanel = () => {\r\n    return {\r\n        width: '100%',\r\n        padding: '40px'\r\n    };\r\n};\r\n\r\nconst leftDisplayPanel = () => {\r\n    return {\r\n        width: '15%',\r\n        display: 'inline-block',\r\n        float: 'left'\r\n    }\r\n};\r\n\r\nconst rightDisplayPanel = () => {\r\n    return {\r\n        display: 'grid',\r\n        marginTop: '15px'\r\n    }\r\n};\r\nconst formatGeneratedMoveSequence = (moves) => {\r\n    var images = []\r\n    moves.map(move => {\r\n        var color = move.charAt(0);\r\n        var direction = move.charAt(1);\r\n        if (color == 'B') {\r\n            color = 'blue'\r\n        }\r\n        else if (color == 'R') {\r\n            color = 'red'\r\n        }\r\n        else if (color == 'Y') {\r\n            color = 'yellow'\r\n        }\r\n        else {\r\n            color = 'green'\r\n        }\r\n        if (direction == 'N') {\r\n            direction = UP\r\n        }\r\n        else if (direction == 'S') {\r\n            direction = DOWN\r\n        }\r\n        else if (direction == 'E') {\r\n            direction = RIGHT\r\n        }\r\n        else {\r\n            direction = LEFT\r\n        }\r\n        images.push(<img src={DIRECTION_MAP_IMAGES[color][direction]}/>)\r\n    });\r\n    return images\r\n}\r\n\r\n\r\nconst setDefaultSquareSize = (boardWidth,boardHeight) => {\r\n    const drawerWidth = document.getElementById(\"MainDrawer\") == null ? 140 : parseInt(getComputedStyle(document.getElementById(\"MainDrawer\")).width);\r\n    const windowWidth = window.innerWidth;\r\n    const windowHeight = window.innerHeight;\r\n    var settingstop = windowHeight - 120;\r\n\r\n    settingstop = settingstop / boardHeight\r\n    settingstop = parseInt(settingstop);\r\n    settingstop = settingstop - (settingstop % 4)\r\n\r\n    var settings = ((windowWidth < 600) ? windowWidth : (windowWidth - drawerWidth) / 1.75);\r\n    settings = settings / boardWidth;\r\n    settings = parseInt(settings);\r\n    settings = settings - (settings % 4);\r\n    var squarevalue = settings > settingstop ? settingstop : settings\r\n    if (squarevalue < 16) {\r\n        squarevalue = 16;\r\n    }\r\n    else if (squarevalue > 52) {\r\n        squarevalue = 52;\r\n    }\r\n    return squarevalue;\r\n};\r\n\r\nconst ColoredLineDirections = [LEFT,RIGHT,UP,DOWN]\r\n\r\n\r\nclass Game extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        if (this.props.puzzleRush === 'Yes') {\r\n            this.state = JSON.parse(this.props.games[0].g_puzzledata)\r\n            this.state.games = this.props.games\r\n            this.state.p_id = this.props.p_id;\r\n            this.state.gameWon = false;\r\n            this.state.ColoredLineDirections = [];\r\n            this.state.showBoardResetPanelModal = false;\r\n            this.state.squareSize = 40;\r\n            this.state.copiedToClipboard = false;\r\n            this.state.numPuzzleon = 0;\r\n            this.state.createMode = 'No';\r\n            this.state.buildMode = false;\r\n            this.state.totalMovesList = [];\r\n            this.state.solutiondifference = [];\r\n            this.state.squareSize = setDefaultSquareSize(this.state.width,this.state.height);\r\n            this.state.tipsText = []\r\n        }\r\n        else if (this.props.dailyChallengeModeAnswers === 'Yes') {\r\n            this.state = JSON.parse(this.props.games[0].g_puzzledata)\r\n            this.state.goals = [];\r\n            this.props.games.map(game => {\r\n                var gamedata = JSON.parse(game.g_puzzledata)\r\n                this.state.goals.push(gamedata.goal)\r\n            })\r\n            this.state.games = this.props.games;\r\n            this.state.gameWon = false;\r\n            this.state.ColoredLineDirections = [];\r\n            this.state.showBoardResetPanelModal = false;\r\n            this.state.copiedToClipboard = false;\r\n            this.state.numPuzzleon = 0;\r\n            this.state.createMode = 'No';\r\n            this.state.buildMode = false;\r\n            this.state.totalMovesList = [];\r\n            this.state.solutiondifference = [];\r\n            this.state.squareSize = setDefaultSquareSize(this.state.width,this.state.height);\r\n            this.state.gamesWonDaily = [false,false,false,false];\r\n            this.state.moveHistoryList=[];\r\n\r\n            this.state.lowestMoveSequence = formatGeneratedMoveSequence(JSON.parse(this.props.games[0].g_solutiondata))\r\n            this.state.lowestMovesforPuzzle = this.props.games[0].g_moves\r\n            this.state.difficultyforPuzzle = this.props.games[0].g_difficulty\r\n            this.state.playerMovedSequence = JSON.parse(this.props.solutionDataSubmitted)[0]\r\n\r\n            this.state.playerStateList = [];\r\n            this.state.tipsText = [];\r\n            this.state.highscores = [];\r\n        }\r\n        else if (this.props.dailyChallengeMode === 'Yes') {\r\n            this.state = JSON.parse(this.props.games[0].g_puzzledata)\r\n            this.state.goals = [];\r\n            this.props.games.map(game => {\r\n                var gamedata = JSON.parse(game.g_puzzledata)\r\n                this.state.goals.push(gamedata.goal)\r\n            })\r\n            this.state.games = this.props.games\r\n            this.state.gameWon = false;\r\n            this.state.ColoredLineDirections = [];\r\n            this.state.showBoardResetPanelModal = false;\r\n            this.state.copiedToClipboard = false;\r\n            this.state.numPuzzleon = 0;\r\n            this.state.createMode = 'No';\r\n            this.state.buildMode = false;\r\n            this.state.totalMovesList = [];\r\n            this.state.solutiondifference = [];\r\n            this.state.squareSize = setDefaultSquareSize(this.state.width,this.state.height);\r\n            console.log(this.props.playerStateList)\r\n            this.state.gamesWonDaily = [false,false,false,false];\r\n            if (this.props.savedMoves != null) {\r\n                this.state.moveHistoryList = this.props.savedMoves\r\n                this.state.gamesWonDaily = [true,true,true,true]\r\n                this.state.moveHistory = this.props.savedMoves[0].slice()\r\n                this.state.playerState = this.props.playerStateList[0].slice()\r\n            }\r\n            else {\r\n                this.state.moveHistoryList=[];\r\n            }\r\n            this.state.playerStateList = this.props.playerStateList != null ? this.props.playerStateList : [];\r\n            this.state.tipsText = ['Winners who are Logged in will receive a Crown','See about page for details on the daily challenge difficulty','Puzzles reset at 3PM EST, the page will refresh automatically'];\r\n            this.state.highscores = this.props.highscores;\r\n            this.state.dc_id = this.props.dc_id;\r\n        }\r\n        else if (this.props.randomGame === 'Yes') {\r\n            this.state = JSON.parse(this.props.game.g_puzzledata)\r\n            this.state.lowestMoves = this.props.game.g_moves\r\n            this.state.lowestMoveSequence = formatGeneratedMoveSequence(JSON.parse(this.props.game.g_solutiondata))\r\n            this.state.difficulty = this.props.game.g_difficulty\r\n            this.state.createMode = 'No';\r\n            this.state.gameWon = false;\r\n            this.state.buildMode = false;\r\n            this.state.ColoredLineDirections = [];\r\n            this.state.squareSize = setDefaultSquareSize(this.state.width,this.state.height);\r\n            this.state.tipsText = ['this game was randomly generated'];\r\n            this.state.uri = this.props.game.g_uri;\r\n            window.history.pushState({id: 'Random Game'},'RobotsEvolved | Random Game','/play/' + this.props.game.g_uri)\r\n        }\r\n        else if (this.props.learnMode === 'Yes') {\r\n            this.state = JSON.parse(this.props.games[0].puzzledata)\r\n            this.state.games = this.props.games\r\n            this.state.gameWon = false;\r\n            this.state.ColoredLineDirections = [];\r\n            this.state.showBoardResetPanelModal = false;\r\n            this.state.copiedToClipboard = false;\r\n            this.state.numPuzzleon = 0;\r\n            this.state.createMode = 'No';\r\n            this.state.buildMode = false;\r\n            this.state.totalMovesList = [];\r\n            this.state.solutiondifference = [];\r\n            this.state.squareSize = setDefaultSquareSize(this.state.width,this.state.height);\r\n            this.state.tipsText = [this.props.games[0].description];\r\n        }\r\n        else if (this.props.loadedGame === 'Yes') {\r\n            this.state = JSON.parse(this.props.gamedata);\r\n            this.state.highscores = this.props.highscores;\r\n            this.state.uri = this.props.uri;\r\n            this.state.gameWon = false;\r\n            this.state.ColoredLineDirections = [];\r\n            this.state.showBoardResetPanelModal = false;\r\n            this.state.squareSize = 40;\r\n            this.state.buildMode = false;\r\n            this.state.copiedToClipboard = false;\r\n            this.state.squareSize = setDefaultSquareSize(this.state.width,this.state.height);\r\n            this.state.tipsText = []\r\n            window.history.pushState({id: 'Play Game'},'RobotsEvolved | Play Game','/play/'+ this.props.uri)\r\n        }\r\n        else {\r\n            var squareSize = 40;\r\n            var board = BoardGenerator(this.props.settingsWidth,this.props.settingsHeight,1,'blank');\r\n            this.state = extend({\r\n                robotSelected: 0,\r\n                moveHistory: [],\r\n                uri: '',\r\n                createMode: 'Yes',\r\n                buildMode: true,\r\n                highscores: [],\r\n                showBoardResetPanelModal: false,\r\n                ColoredLineDirections: [],\r\n                width: this.props.settingsWidth,\r\n                height: this.props.settingsHeight,\r\n                percentWall: this.props.settingsPercent,\r\n                squareSize: squareSize,\r\n                copiedToClipboard: false,\r\n                tipsText: [\r\n                                        'Click on Wall spots to toggle',\r\n                                        'Click and Drag robots or goal to move robots',\r\n                                        'When you are ready, toggle build mode in order to solve the puzzle',\r\n                                        'You must solve the puzzle in order to submit.']\r\n            },board);\r\n            this.state.squareSize = setDefaultSquareSize(this.state.width,this.state.height);\r\n        }\r\n        this.state.showColoredLineDirections = this.props.LineDirections;\r\n    };\r\n\r\n    updateHighscores = () => {\r\n        axios.get('/updatehighscores?uri=' + this.state.uri)\r\n            .then( res => {\r\n                this.setState({\r\n                    highscores: JSON.parse(res.data.highscores),\r\n                });\r\n            });\r\n    };\r\n\r\n    DimensionChanged = (dimension) => {\r\n        this.setState({\r\n            squareSize: dimension * 4\r\n        });\r\n    };\r\n\r\n    copiedClipboard = () => {\r\n        this.setState({\r\n            copiedToClipboard: true,\r\n        });\r\n\r\n    };\r\n\r\n\r\n    updateDailyHighscores = () => {\r\n        axios.get('/dailychallengehighscores?dc_id=' + this.state.dc_id)\r\n            .then( res => {\r\n                this.setState({\r\n                    highscores: JSON.parse(res.data.highscores),\r\n                });\r\n                if (res.data.dc_id != this.state.dc_id) {\r\n                    this.props.handleClickDailyChallenge();\r\n                }\r\n            });\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        window.onkeydown = this.handleKeyDown;\r\n        if (this.props.loadedGame === 'Yes') {\r\n            this.updateHighscores();\r\n            var IntervalId = setInterval(this.updateHighscores, 4000);\r\n            this.setState({\r\n                IntervalId: IntervalId,\r\n            });\r\n        }\r\n        else if (this.props.dailyChallengeMode === 'Yes') {\r\n            this.updateDailyHighscores();\r\n            var IntervalId = setInterval(this.updateDailyHighscores, 4000);\r\n            this.setState({\r\n                IntervalId: IntervalId,\r\n            });\r\n        }\r\n    };\r\n\r\n    componentWillUnmount = () => {\r\n        if (this.props.loadedGame === 'Yes') {\r\n            clearInterval(this.state.IntervalId);\r\n        }\r\n        else if (this.props.dailyChallengeMode === 'Yes') {\r\n            clearInterval(this.state.IntervalId);\r\n        }\r\n    };\r\n\r\n    handleKeyDown = (e) => {\r\n        let newDirection;\r\n        switch(e.keyCode) {\r\n            case 37:\r\n                newDirection = { top: 0, left: -40, dir: LEFT};\r\n                break;\r\n            case 38:\r\n                newDirection = { top: -40, left: 0, dir: UP};\r\n                break;\r\n            case 39:\r\n                newDirection = { top: 0, left: 40, dir: RIGHT};\r\n                break;\r\n            case 40:\r\n                newDirection = { top: 40, left: 0, dir: DOWN};\r\n                break;\r\n            case 9:\r\n                this.tabSelector();\r\n                return;\r\n                break;\r\n            case 32:\r\n                if (!this.state.gameWon) {\r\n                    this.handleUndoMove();\r\n                }\r\n                break;\r\n                return;\r\n            case 13:\r\n                if (!this.state.gameWon) {\r\n                    this.resetPuzzle();\r\n                }\r\n            /*case 83:\r\n                newDirection = { top: 40, left: 0, dir: DOWN};\r\n                break;\r\n            case 68:\r\n                newDirection = { top: 0, left: 40, dir: RIGHT};\r\n                break;\r\n            case 87:\r\n                newDirection = { top: -40, left: 0, dir: UP};\r\n                break;*/\r\n            default:\r\n                return;\r\n        }\r\n        this.handlePlayerMovement(newDirection);\r\n    };\r\n\r\n    robotSelect = (i) => {\r\n        this.setState({\r\n            robotSelected: i,\r\n        });\r\n    };\r\n\r\n    submitPuzzle = event => {\r\n        event.preventDefault();\r\n        var namesubmit = document.getElementById(\"namesubmit\").value;\r\n        var state = this.state;\r\n        state.playerState = this.state.playerStart.slice();\r\n        state.moveHistory = [];\r\n        state.createMode = 'No';\r\n        var username = 'Anonymous';\r\n        if (window.userInfo !== null) {\r\n            username = window.userInfo.username\r\n        }\r\n        axios.post('/submitpuzzle', extend({puzzledata: state},{name: namesubmit,authorname: username}))\r\n            .then( res => {\r\n                this.setState({\r\n                    uri: res.data.uri,\r\n                    gameWon: false\r\n                });\r\n                this.props.history.push('/play/' + res.data.uri)\r\n            });\r\n    };\r\n\r\n    toggleLineIndicators = () => {\r\n        if (this.state.showColoredLineDirections === true) {\r\n            this.setState({\r\n                showColoredLineDirections: false,\r\n            });\r\n            this.props.handleLineDirections(false)\r\n        }\r\n        else {\r\n            this.setState({\r\n                showColoredLineDirections: true,\r\n            });\r\n            this.props.handleLineDirections(true)\r\n        }\r\n    };\r\n\r\n    toggleBuildMode = () => {\r\n        if (this.state.buildMode) {\r\n            this.setState({\r\n                buildMode: false,\r\n                playerState: this.state.playerStart.slice(),\r\n                moveHistory: [],\r\n            });\r\n        }\r\n        else {\r\n            this.setState({\r\n                playerState: this.state.playerStart.slice(),\r\n                moveHistory: [],\r\n                buildMode: true,\r\n            });\r\n        }\r\n    };\r\n\r\n    submitAnswer = event => {\r\n        event.preventDefault();\r\n        axios.post('/submithighscore', {highscore: this.state.moveHistory.length, name: document.getElementById(\"namesubmitHS\").value, uri: this.state.uri})\r\n            .then( res => {\r\n                this.setState({gameWon: false});\r\n            });\r\n        this.resetPuzzle();\r\n    };\r\n\r\n    resetPuzzle = event => {\r\n        if (typeof event !== 'undefined') {\r\n            event.preventDefault();\r\n        }\r\n        this.setState({\r\n            playerState: this.state.playerStart.slice(),\r\n            moveHistory: [],\r\n            gameWon: false,\r\n        });\r\n    };\r\n\r\n    tabSelector = () => {\r\n        if (this.state.gameWon === false) {\r\n            var robotSelected = this.state.robotSelected + 1;\r\n            robotSelected = robotSelected % 4;\r\n            this.setState({\r\n                robotSelected: robotSelected,\r\n            });\r\n        }\r\n    };\r\n\r\n    createBoardPressed = (type) => {\r\n        if (type === 'Create Board') {\r\n            this.setState({\r\n                showBoardResetPanelModal: true\r\n            });\r\n        }\r\n    };\r\n\r\n    closeRandomStatsModal = event => {\r\n        this.setState({\r\n            closeRandomStatsModal: false,\r\n            playerState: this.state.playerStart.slice(),\r\n            moveHistory: [],\r\n            gameWon: false\r\n        });\r\n    }\r\n\r\n    closeCreateBoardModal = event => {\r\n        this.setState({\r\n            showBoardResetPanelModal: false\r\n        });\r\n    };\r\n\r\n    closePuzzleRushFinishedModal = event => {\r\n        this.setState({\r\n            showPuzzleRushFinishedModal: false\r\n        });\r\n\r\n    }\r\n\r\n    createBoard = (width,height,percent) => {\r\n        var board = BoardGenerator(width,height,percent, 'blank');\r\n        var squareSize = setDefaultSquareSize(width,height);\r\n        this.setState(extend({\r\n            width: width,\r\n            height: height,\r\n            percent: percent,\r\n            squareSize: squareSize,\r\n        },board));\r\n        this.closeCreateBoardModal()\r\n    };\r\n\r\n    showStatsModal = () => {\r\n        this.setState({\r\n            playerState: this.state.playerStart.slice(),\r\n            moveHistory: [],\r\n            gameWon: false,\r\n            showStatsModal: true,\r\n        });\r\n    }\r\n\r\n    handleCollision = (dirObj,robotSelected,color) => {\r\n        var newPosition;\r\n        var robotX = this.state.playerState[robotSelected].left;\r\n        var robotY = this.state.playerState[robotSelected].top;\r\n        switch(dirObj.dir) {\r\n            case UP:\r\n                var minimumWall = 0;\r\n                this.state.wallHorizontal.map(wall =>\r\n                {\r\n                    if (wall.left === robotX && wall.top <= robotY && wall.top > minimumWall && wall.opacity === 1) {\r\n                        minimumWall = wall.top;\r\n                    }\r\n                });\r\n                this.state.playerState.map(checkRobot => {\r\n                    if (checkRobot.left === robotX && checkRobot.top < robotY && checkRobot.top + 1 > minimumWall) {\r\n                        minimumWall = checkRobot.top + 1;\r\n                    }\r\n\r\n                });\r\n\r\n                newPosition = {top: minimumWall, left: robotX, color: color};\r\n                break;\r\n            case RIGHT:\r\n                var minimumWall = this.state.width - 1;\r\n                this.state.wallVerticle.map(wall => {\r\n                    if (wall.top === robotY && wall.left > robotX && wall.left < minimumWall + 1 && wall.opacity === 1) {\r\n                        minimumWall = wall.left - 1;\r\n\r\n                    }\r\n                });\r\n                this.state.playerState.map(checkRobot => {\r\n                    if (checkRobot.top === robotY && checkRobot.left > robotX && checkRobot.left < minimumWall + 1) {\r\n                        minimumWall = checkRobot.left - 1;\r\n                    }\r\n\r\n                });\r\n                newPosition = {top: robotY, left:minimumWall, color: color};\r\n                break;\r\n            case LEFT:\r\n                var minimumWall = 0;\r\n                this.state.wallVerticle.map(wall => {\r\n                    if (wall.top === robotY && wall.left <= robotX && wall.left > minimumWall && wall.opacity === 1) {\r\n                        minimumWall = wall.left;\r\n                    }\r\n                });\r\n                this.state.playerState.map(checkRobot => {\r\n                    if (checkRobot.top === robotY && checkRobot.left < robotX && checkRobot.left + 1 > minimumWall) {\r\n                        minimumWall = checkRobot.left + 1;\r\n                    }\r\n                });\r\n                newPosition = {top: robotY, left:minimumWall, color: color};\r\n                break;\r\n            case DOWN:\r\n                var minimumWall = this.state.height - 1;\r\n                this.state.wallHorizontal.map(wall =>\r\n                {\r\n                    if (wall.left === robotX && wall.top > robotY && wall.top < minimumWall + 1 && wall.opacity === 1)\r\n                        minimumWall = wall.top - 1;\r\n\r\n                });\r\n                this.state.playerState.map(checkRobot => {\r\n                    if (checkRobot.left === robotX && checkRobot.top > robotY && checkRobot.top < minimumWall + 1) {\r\n                        minimumWall = checkRobot.top - 1;\r\n                    }\r\n                });\r\n                newPosition = {top: minimumWall, left: robotX, color: color};\r\n                break;\r\n            default:\r\n                return;\r\n        }\r\n        return newPosition;\r\n    };\r\n\r\n\r\n    puzzleRushTimeUp = () => {\r\n        var totalMovesDiff = 0;\r\n        this.state.solutiondifference.map(numMoves => {\r\n            totalMovesDiff += numMoves;\r\n        });\r\n        var averageTime = parseInt(300 / (this.state.numPuzzleon))\r\n        var totalMoves = 0;\r\n        this.state.totalMovesList.map(numMoves => {\r\n            totalMoves += numMoves\r\n        });\r\n        var avgMoves = parseInt(totalMoves / (this.state.numPuzzleon))\r\n        var movesPerSecond = totalMoves / 300;\r\n\r\n        axios.post('/puzzlerushend', {p_id: this.state.p_id,totalMoves: totalMoves,differenceFrom: totalMovesDiff})\r\n            .then( res => {\r\n                console.log(res.data);\r\n            });\r\n\r\n        this.setState({\r\n            showPuzzleRushFinishedModal: true,\r\n            numPuzzlesCompleted: this.state.numPuzzleon,\r\n            percentile: 'TBD%',\r\n            averageTime: averageTime + 's',\r\n            averageMoves: avgMoves,\r\n            differenceOptimal: totalMovesDiff,\r\n            movesPerSecond: movesPerSecond\r\n        });\r\n    }\r\n\r\n    submitDailyAnswer = (LastRobotPosition) => {\r\n        var moveHistoryList = this.state.moveHistoryList.slice()\r\n        moveHistoryList[this.state.numPuzzleon] = this.state.moveHistory.slice()\r\n        var numMoves = 0\r\n        moveHistoryList.map(moveHistory => {\r\n            numMoves += moveHistory.length\r\n        });\r\n        var playerStateList = this.state.playerStateList.slice()\r\n        var playerState = this.state.playerState.slice()\r\n        console.log(this.state.robotSelected)\r\n        playerState[parseInt(this.state.robotSelected)] = LastRobotPosition;\r\n        console.log(playerState[parseInt(this.state.robotSelected)])\r\n        console.log(playerState);\r\n\r\n        playerStateList[this.state.numPuzzleon] = playerState\r\n        console.log(LastRobotPosition);\r\n        console.log(playerState);\r\n        axios.post('/dailychallenge', {score: numMoves, name: document.getElementById(\"namesubmitHS\").value, solutiondata: moveHistoryList, dc_id: this.state.dc_id, playerStateList: playerStateList})\r\n            .then( res => {\r\n                console.log(res)\r\n                this.handleUndoMove();\r\n            });\r\n        window.dc_movesList = moveHistoryList;\r\n        window.dc_playerList = playerStateList;\r\n        this.state.gameWon = false;\r\n    }\r\n\r\n    checkwin = (robotPosition) => {\r\n        if (robotPosition.top === this.state.goal.top && robotPosition.left === this.state.goal.left) {\r\n            if (this.state.gameWon === false)\r\n                this.setState({gameWon: true});\r\n            if (this.state.createMode === 'No' && this.props.puzzleRush !== 'Yes') {\r\n                var username = '';\r\n                if (window.userInfo !== null) {\r\n                    username = window.userInfo.username\r\n                }\r\n                if (this.props.randomGame === 'Yes') {\r\n                    return (\r\n                        <RandomGameStatsModal\r\n                            show={this.state.gameWon}\r\n                            lowestMoves={this.state.lowestMoves}\r\n                            lowestMoveSequence={this.state.lowestMoveSequence}\r\n                            numMoves={this.state.moveHistory.length}\r\n                            difficulty={this.state.difficulty}\r\n                            resetPuzzle={this.resetPuzzle}\r\n                            handleShowRandomAnswers={this.handleShowRandomAnswers}\r\n                        />\r\n                    );\r\n                }\r\n                else if (this.props.dailyChallengeModeAnswers === 'Yes') {\r\n                    return null\r\n                }\r\n                else if (this.props.dailyChallengeMode === 'Yes') {\r\n                    var Won=true\r\n                    this.state.gamesWonDaily.map((gameWon,index) => {\r\n                        if (!(index == this.state.numPuzzleon) && !gameWon) {\r\n                            Won = false\r\n                        }\r\n                    });\r\n                    var moveHistoryList = this.state.moveHistoryList\r\n                    moveHistoryList[this.state.numPuzzleon] = this.state.moveHistory\r\n                    var numMoves = 0\r\n                    moveHistoryList.map(moveHistory => {\r\n                        numMoves += moveHistory.length\r\n                    });\r\n                    return (Won ? <YouWinDailyFinalModal\r\n                        show={this.state.gameWon}\r\n                        numMoves={numMoves}\r\n                        submitAnswer={this.submitDailyAnswer}\r\n                        resetPuzzle={this.resetPuzzle}\r\n                        username={username}\r\n                        undoMove={this.handleUndoMove}\r\n                        robotPosition={robotPosition}\r\n                    /> : <YouWinDailySingleModal\r\n                        show={this.state.gameWon}\r\n                        numMoves={this.state.moveHistory.length}\r\n                        totalMoves={numMoves}\r\n                        undoMove={this.handleUndoMove}\r\n                        resetPuzzle={this.resetPuzzle}\r\n                        games={this.state.games}\r\n                        handleClickGame={this.handleDailyClickGame}\r\n                        numPuzzleon={this.state.numPuzzleon}\r\n                        moveNextPuzzle={this.moveNextPuzzle}\r\n                    />);\r\n                }\r\n                else if (this.props.learnMode === 'Yes') {\r\n                    return  (<YouWinLessonModal\r\n                        show={this.state.gameWon}\r\n                        numMoves={this.state.moveHistory.length}\r\n                        resetPuzzle={this.resetPuzzle}\r\n                    />);\r\n                }\r\n                else {\r\n                    return  (<YouWinModal\r\n                        show={this.state.gameWon}\r\n                        numMoves={this.state.moveHistory.length}\r\n                        submitAnswer={this.submitAnswer}\r\n                        resetPuzzle={this.resetPuzzle}\r\n                        username={username}\r\n                    />);\r\n                }\r\n            }\r\n            else if (this.props.puzzleRush === 'Yes'){\r\n                axios.post('/puzzlerushsubmit', {p_id: this.state.p_id,g_id:this.state.games[this.state.numPuzzleon].g_id, moveHistory: this.state.moveHistory})\r\n                    .then( res => {\r\n                        console.log(res.data);\r\n                    });\r\n                var totalMoves = this.state.moveHistory.slice().length\r\n                var totalMovesList = this.state.totalMovesList\r\n                totalMovesList.push(totalMoves)\r\n                var solutionmoves = totalMoves - this.state.games[this.state.numPuzzleon].g_moves\r\n                var solutiondifference = this.state.solutiondifference\r\n                solutiondifference.push(solutionmoves)\r\n                var puzzledata = JSON.parse(this.state.games[this.state.numPuzzleon + 1].g_puzzledata)\r\n                if (this.state.numPuzzleon + 10 > this.state.games.length) {\r\n                    axios.get('/puzzlerushgetmore?p_id=' + this.props.p_id + '&difficulty=' + this.props.difficulty)\r\n                        .then( res => {\r\n                                var games = JSON.parse(res.data.games);\r\n                                var stategames = this.state.games\r\n                                var newarray = stategames.concat(games)\r\n                                this.setState({\r\n                                    games: newarray\r\n                                });\r\n                        });\r\n                }\r\n                this.setState(\r\n                    extend(puzzledata,{numPuzzleon: this.state.numPuzzleon + 1, playerState: puzzledata.playerStart.slice(), gameWon: false, solutiondifference: solutiondifference, totalMovesList: totalMovesList})\r\n                );\r\n\r\n            }\r\n            else {\r\n                return (<AddPuzzleModal\r\n                    show={this.state.gameWon}\r\n                    submitPuzzle={this.submitPuzzle}\r\n                    resetPuzzle={this.resetPuzzle}\r\n                />);\r\n            }\r\n        }\r\n        else {\r\n            return '';\r\n        }\r\n    };\r\n\r\n    handleShowRandomAnswers = () => {\r\n        this.setState({\r\n            tipsText: [this.state.lowestMoveSequence]\r\n        })\r\n    }\r\n\r\n    handlePlayerMovement = (dirObj) => {\r\n        if (dirObj.dir !== undefined && this.state.gameWon === false && !this.state.buildMode) {\r\n            var oldPositon = {left: this.state.playerState[this.state.robotSelected].left, top: this.state.playerState[this.state.robotSelected].top};\r\n            var newPosition = this.handleCollision(dirObj, this.state.robotSelected, this.state.playerState[this.state.robotSelected].color);\r\n            var playerState = this.state.playerState;\r\n            var moveHistory = this.state.moveHistory;\r\n            newPosition = extend(newPosition, {colorSignifier: playerState[this.state.robotSelected].colorSignifier});\r\n            if (!(newPosition.top === playerState[this.state.robotSelected].top && newPosition.left === playerState[this.state.robotSelected].left) && !this.state.buildMode) {\r\n                moveHistory.push({\r\n                    dir: dirObj.dir,\r\n                    robot: this.state.robotSelected,\r\n                    colorSignifier: playerState[this.state.robotSelected].colorSignifier,\r\n                    prevPosition: oldPositon\r\n                });\r\n            }\r\n            playerState[this.state.robotSelected] = newPosition;\r\n            this.setState({\r\n                playerState: playerState,\r\n                moveHistory: moveHistory,\r\n            });\r\n            this.checkwin(newPosition);\r\n        }\r\n    };\r\n\r\n    handleCloseToolTips = (index) => {\r\n        this.state.tipsText.splice(index,1);\r\n        this.setState({\r\n            tipsText: this.state.tipsText,\r\n        });\r\n    }\r\n\r\n    moveNextPuzzle = () => {\r\n        this.handleDailyClickGame((this.state.numPuzzleon + 1) % 4)\r\n    }\r\n\r\n    handleLearnClickGame = index => {\r\n        var puzzledata = JSON.parse(this.props.games[index].puzzledata);\r\n        var squareSize = setDefaultSquareSize(puzzledata.width,puzzledata.height);\r\n        this.setState(\r\n            extend(puzzledata,{buildMode: false,squareSize: squareSize, numPuzzleon: index, moveHistory: [], gameWon: false, playerState: puzzledata.playerStart.slice(),tipsText: [this.props.games[index].description]})\r\n        );\r\n    }\r\n\r\n    handleDailyClickAnswersGame = index => {\r\n        var puzzledata = JSON.parse(this.props.games[index].g_puzzledata);\r\n        if (this.state.moveHistoryList[index]==undefined) {\r\n            var moveHistory = [];\r\n        }\r\n        else {\r\n            var moveHistory = this.state.moveHistoryList[index];\r\n        }\r\n\r\n        if (this.state.playerStateList[index]==undefined) {\r\n            puzzledata.playerState = puzzledata.playerStart.slice()\r\n        }\r\n        else {\r\n            puzzledata.playerState = this.state.playerStateList[index];\r\n        }\r\n        var gamesWonDaily = this.state.gamesWonDaily\r\n        if (this.state.gameWon) {\r\n            gamesWonDaily[this.state.numPuzzleon] = true\r\n        }\r\n        else {\r\n            gamesWonDaily[this.state.numPuzzleon] = false\r\n        }\r\n        var playerState = this.state.playerState.slice();\r\n        var playerStateList = this.state.playerStateList;\r\n        playerStateList[this.state.numPuzzleon] = playerState;\r\n        var moveHistoryList = this.state.moveHistoryList;\r\n        moveHistoryList[this.state.numPuzzleon] = this.state.moveHistory.slice();\r\n        var lowestMoveSequence = formatGeneratedMoveSequence(JSON.parse(this.props.games[index].g_solutiondata))\r\n        var lowestMovesforPuzzle = this.props.games[index].g_moves\r\n        var difficultyforPuzzle = this.props.games[index].g_difficulty\r\n        var playerMovedSequence = JSON.parse(this.props.solutionDataSubmitted)[index]\r\n\r\n        this.setState(\r\n            extend(puzzledata,{highscores: this.state.highscores, numPuzzleon: index, moveHistory: moveHistory,\r\n                    gameWon: false, playerStateList: playerStateList, moveHistoryList: moveHistoryList, gamesWonDaily: gamesWonDaily,\r\n                    lowestMoveSequence: lowestMoveSequence, lowestMovesforPuzzle: lowestMovesforPuzzle, difficultyforPuzzle: difficultyforPuzzle,\r\n                    playerMovedSequence: playerMovedSequence})\r\n        );\r\n    }\r\n\r\n    handleDailyClickGame = index => {\r\n        var puzzledata = JSON.parse(this.props.games[index].g_puzzledata);\r\n        if (this.state.moveHistoryList[index]==undefined) {\r\n            var moveHistory = [];\r\n        }\r\n        else {\r\n            var moveHistory = this.state.moveHistoryList[index];\r\n        }\r\n\r\n        if (this.state.playerStateList[index]==undefined) {\r\n            puzzledata.playerState = puzzledata.playerStart.slice()\r\n        }\r\n        else {\r\n            puzzledata.playerState = this.state.playerStateList[index];\r\n        }\r\n        var gamesWonDaily = this.state.gamesWonDaily\r\n        if (this.state.gameWon) {\r\n            gamesWonDaily[this.state.numPuzzleon] = true\r\n        }\r\n        else {\r\n            gamesWonDaily[this.state.numPuzzleon] = false\r\n        }\r\n        var playerState = this.state.playerState.slice();\r\n        var playerStateList = this.state.playerStateList;\r\n        playerStateList[this.state.numPuzzleon] = playerState;\r\n        var moveHistoryList = this.state.moveHistoryList;\r\n        moveHistoryList[this.state.numPuzzleon] = this.state.moveHistory.slice();\r\n\r\n        this.setState(\r\n            extend(puzzledata,{highscores: this.state.highscores, numPuzzleon: index, moveHistory: moveHistory, gameWon: false, playerStateList: playerStateList, moveHistoryList: moveHistoryList, gamesWonDaily: gamesWonDaily})\r\n        );\r\n    }\r\n\r\n\r\n    loadSidebar = () => {\r\n        if (this.props.learnMode == 'Yes') {\r\n            return (\r\n                <Grid container xs={12} direction=\"column\">\r\n                    <ButtonGroup\r\n                        orientation=\"vertical\"\r\n                        aria-label=\"vertical contained primary button group\"\r\n                        variant=\"contained\">\r\n                        <Divider/>\r\n                        <Typography\r\n                             color=\"textSecondary\"\r\n                             display=\"block\"\r\n                             variant=\"caption\"\r\n                             style={{paddingBottom: '10px'}}\r\n                         >\r\n                             Beginner Lessons\r\n                         </Typography>\r\n                        {\r\n                            this.state.games.map((game,index) => {\r\n                                    if (index === 4) {\r\n                                        return(\r\n                                                <Typography\r\n                                                     color=\"textSecondary\"\r\n                                                     display=\"block\"\r\n                                                     variant=\"caption\"\r\n                                                     style={{paddingBottom: '10px', paddingTop: '30px'}}\r\n                                                 >\r\n                                                     Intermediate Lessons\r\n                                                 </Typography>\r\n                                        )\r\n                                    }\r\n                                    else if (index === 7) {\r\n                                            return(\r\n                                                <Typography\r\n                                                     color=\"textSecondary\"\r\n                                                     display=\"block\"\r\n                                                     variant=\"caption\"\r\n                                                     style={{paddingBottom: '10px', paddingTop: '30px'}}\r\n                                                 >\r\n                                                     Advanced Lessons\r\n                                                 </Typography>\r\n                                        )\r\n                                    }\r\n                                    return(\r\n                                        <LearnGameItems selected={this.state.numPuzzleon} game={game} name={game.name} index={index} handleClickGame={this.handleLearnClickGame}/>\r\n                                    )\r\n                                }\r\n\r\n                            )\r\n                        }\r\n                    </ButtonGroup>\r\n                </Grid>\r\n            )\r\n        }\r\n        else if (this.props.dailyChallengeModeAnswers === 'Yes') {\r\n            return(\r\n                <Grid container xs={12} direction=\"column\">\r\n                    <Grid item xs={12}>\r\n                        <ButtonGroup\r\n                            orientation=\"vertical\"\r\n                            aria-label=\"vertical contained primary button group\"\r\n                            variant=\"contained\">\r\n                            {\r\n                                this.state.games.map((game,index) =>\r\n                                        <LearnGameItems selected={this.state.numPuzzleon} game={game} name={'Puzzle #' + (index + 1)} index={index} handleClickGame={this.handleDailyClickAnswersGame}/>\r\n                                )\r\n                            }\r\n                        </ButtonGroup>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <DailyChallengeHistoryData\r\n                            lowestMovesforPuzzle={this.state.lowestMovesforPuzzle}\r\n                            lowestMoveSequence={this.state.lowestMoveSequence}\r\n                            difficultyforPuzzle={this.state.difficultyforPuzzle}\r\n                            nameSubmitted={this.props.nameSubmitted}\r\n                            playerMovedSequence={this.state.playerMovedSequence}\r\n                            bestScore={this.props.bestScore}\r\n                            scoreSubmitted={this.props.scoreSubmitted}\r\n                         />\r\n                    </Grid>\r\n                </Grid>\r\n            )\r\n        }\r\n        else if (this.props.dailyChallengeMode === 'Yes') {\r\n            return(\r\n                <Grid container xs={12} direction=\"column\">\r\n                    <Grid item xs={12}>\r\n                        <ButtonGroup\r\n                            orientation=\"vertical\"\r\n                            aria-label=\"vertical contained primary button group\"\r\n                            variant=\"contained\">\r\n                            {\r\n                                this.state.games.map((game,index) =>\r\n                                        <LearnGameItems selected={this.state.numPuzzleon} game={game} name={'Puzzle #' + (index + 1)} index={index} handleClickGame={this.handleDailyClickGame}/>\r\n                                )\r\n                            }\r\n                        </ButtonGroup>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <DailyChallengeScores highscores={this.state.highscores}/>\r\n                    </Grid>\r\n                </Grid>\r\n            )\r\n        }\r\n        else if (this.state.createMode === 'Yes') {\r\n            return null;\r\n        }\r\n        else if (this.props.randomGame === 'Yes') {\r\n            return null;\r\n        }\r\n        else if (this.props.puzzleRush) {\r\n            return (\r\n                     <div>\r\n                        <Timer puzzleRushTimeUp={this.puzzleRushTimeUp}>\r\n                        </Timer>\r\n                        <Typography id=\"discrete-slider-small-steps\"\r\n                                     color=\"Primary\"\r\n                                     variant=\"h3\"\r\n                                     display=\"inline\"\r\n                                     gutterBottom>\r\n                             {this.state.numPuzzleon}\r\n                         </Typography>\r\n                     </div>\r\n            );\r\n        }\r\n        else {\r\n            return(\r\n            <div style={{display: 'grid'}}>\r\n                <Typography\r\n                    color=\"secondary\"\r\n                    display=\"block\"\r\n                    variant={\"h4\"}\r\n\r\n                >\r\n                    {this.props.name}\r\n                </Typography>\r\n                <br/>\r\n                <Grid container xs={12} direction=\"column\">\r\n                <HighScores highscores={this.state.highscores}/>\r\n                </Grid>\r\n            </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    handlePlayerMovementFromMouse = (direction) => {\r\n        this.handlePlayerMovement({dir: direction})\r\n    };\r\n\r\n    handleUndoMove = () => {\r\n        var moveHistory = this.state.moveHistory;\r\n        var playerState = this.state.playerState;\r\n        if (moveHistory.length !== 0) {\r\n            var moveObj = moveHistory.pop();\r\n            playerState[moveObj.robot].left = moveObj.prevPosition.left;\r\n            playerState[moveObj.robot].top = moveObj.prevPosition.top;\r\n            this.setState({\r\n                playerState: playerState,\r\n                moveHistory: moveHistory,\r\n                gameWon: false,\r\n            });\r\n        }\r\n    };\r\n\r\n    createModeWallClick = (opacity,orientation,top,left) => {\r\n        if (this.state.createMode === 'Yes' && this.state.buildMode) {\r\n            this.resetPuzzle();\r\n            var indexToChange;\r\n            if (orientation === 'horizontal') {\r\n                var newWallHorizontal = this.state.wallHorizontal;\r\n                newWallHorizontal.map((wallH, index) => {\r\n                    if (wallH.top === top && wallH.left === left) {\r\n                        indexToChange = index;\r\n                    }\r\n                });\r\n                newWallHorizontal[indexToChange] = {top: top,left: left,opacity: opacity};\r\n                console.log('clicking horizontal wall');\r\n                this.setState({\r\n                    wallHorizontal: newWallHorizontal\r\n                });\r\n            }\r\n            else if (orientation === 'verticle') {\r\n                var newWallVerticle = this.state.wallVerticle;\r\n                newWallVerticle.map((wallV, index) => {\r\n                    if (wallV.top === top && wallV.left === left) {\r\n                        indexToChange = index;\r\n                    }\r\n                });\r\n                newWallVerticle[indexToChange] = {top: top, left: left, opacity: opacity};\r\n                this.setState({\r\n                    wallVerticle: newWallVerticle\r\n                });\r\n            }\r\n        }\r\n    };\r\n\r\n    onStopDragHandlerGoal = (position) => {\r\n        this.setState({\r\n            goal: {top: Math.round(position.lastY / this.state.squareSize), left: Math.round(position.lastX / this.state.squareSize)},\r\n            playerState: this.state.playerStart.slice(),\r\n            moveHistory: [],\r\n        })\r\n    };\r\n\r\n\r\n    onStopDragHandler = (position,index) => {\r\n        var playerState = this.state.playerState.slice();\r\n        var lastX = position.lastX / this.state.squareSize;\r\n        var lastY = position.lastY / this.state.squareSize;\r\n        playerState[index].top = Math.round(lastY);\r\n        playerState[index].left = Math.round(lastX);\r\n        this.setState({\r\n            playerStart: playerState.slice(),\r\n            playerState: playerState,\r\n            moveHistory: []\r\n        });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n        <div style={gamepanel()}>\r\n            <Grid container alignItems={\"stretch\"}>\r\n                <Grid item xs={12} sm={3} md={2}>\r\n                    <DisplayView\r\n                        puzzleRushTimeUp={this.puzzleRushTimeUp}\r\n                        isPuzzleRush={this.props.puzzleRush}\r\n                        numPuzzleRush={this.state.numPuzzleon}\r\n                        uri={this.state.uri}\r\n                        resetPuzzle={this.resetPuzzle}\r\n                        createBoard={this.createBoard}\r\n                        width={this.state.width}\r\n                        height={this.state.height}\r\n                        percent={this.state.percent}\r\n                        createMode={this.state.createMode}\r\n                        createBoardPressed={this.createBoardPressed}\r\n                        DimensionChanged={this.DimensionChanged}\r\n                        copiedClipboard = {this.copiedClipboard}\r\n                        copiedToClipboard = {this.copiedToClipboard}\r\n                        toggleLineIndicators = {this.toggleLineIndicators}\r\n                        showColoredLineDirections={this.state.showColoredLineDirections}\r\n                        toggleBuildMode = {this.toggleBuildMode}\r\n                        undoMove = {this.handleUndoMove}\r\n                        buildMode = {this.state.buildMode}\r\n                        squareSizeValue = {parseInt((this.state.squareSize/4))}\r\n                        isLesson = {this.props.learnMode}\r\n                        isDailyChallenge = {this.props.dailyChallengeMode}\r\n                        isDailyChallengeAnswers = {this.props.dailyChallengeModeAnswers}\r\n                    />\r\n                    <MovesView moveHistory={this.state.moveHistory} playerState={this.state.playerState}/>\r\n                </Grid>\r\n                <Grid item xs={12} sm={6} md={8} zeroMinWidth>\r\n                    <Board width={this.state.width * this.state.squareSize} height={this.state.height * this.state.squareSize}>\r\n                        {\r\n                            this.state.boardState.map(square =>\r\n                                <Square dimension={this.state.squareSize}\r\n                                        position={{top:square.top,left: square.left}}\r\n                                />\r\n                            )\r\n                        }\r\n                        <Goal\r\n                            dimension={this.state.squareSize}\r\n                            position={this.state.goal}\r\n                            onStopDragHandler={this.onStopDragHandlerGoal}\r\n                            draggableGrid={[this.state.squareSize,this.state.squareSize]}\r\n                            isCreateMode={this.state.createMode}\r\n                            buildMode={this.state.buildMode}\r\n                        />\r\n                        {\r\n                            this.state.playerState.map((player, index) =>\r\n                                <Robot\r\n                                    dimension={this.state.squareSize}\r\n                                    position={{top:player.top,left:player.left}}\r\n                                    color={player.color}\r\n                                    selected={this.state.robotSelected}\r\n                                    index={index}\r\n                                    onClick={this.robotSelect}\r\n                                    handlePlayerMovement={this.handlePlayerMovement}\r\n                                    tabSelector={this.tabSelector}\r\n                                    isCreateMode={this.state.createMode}\r\n                                    buildMode={this.state.buildMode}\r\n                                    onStopDragHandler={this.onStopDragHandler}\r\n                                    draggableGrid={[this.state.squareSize,this.state.squareSize]}\r\n                                />\r\n                            )\r\n                        }\r\n                        {\r\n                            this.state.wallHorizontal.map(wallH =>\r\n                                <Wall\r\n                                    orientation={'horizontal'}\r\n                                    dimension={this.state.squareSize}\r\n                                    position={{top:wallH.top,left:wallH.left}}\r\n                                    opacity={wallH.opacity}\r\n                                    onClick={this.createModeWallClick}\r\n                                />\r\n                            )\r\n                        }\r\n                        {\r\n                            this.state.wallVerticle.map(wallV =>\r\n                                <Wall\r\n                                    orientation={'verticle'}\r\n                                    dimension={this.state.squareSize}\r\n                                    position={{top:wallV.top,left:wallV.left}}\r\n                                    opacity={wallV.opacity}\r\n                                    onClick={this.createModeWallClick}\r\n                                />\r\n                            )\r\n                        }\r\n                        {\r\n                            ColoredLineDirections.map(ColoredLineDirection =>\r\n                                <ColoredLine\r\n                                    dimension={this.state.squareSize}\r\n                                    dir={ColoredLineDirection}\r\n                                    position={{\r\n                                        top: this.state.playerState[this.state.robotSelected].top,\r\n                                        left: this.state.playerState[this.state.robotSelected].left\r\n                                    }}\r\n                                    endPosition={this.handleCollision({dir: ColoredLineDirection}, this.state.robotSelected, this.state.playerState[this.state.robotSelected].color)}\r\n                                    color={this.state.playerState[this.state.robotSelected].color}\r\n                                    show={this.state.showColoredLineDirections}\r\n                                    handleClick={this.handlePlayerMovementFromMouse}\r\n                                    buildMode={this.state.buildMode}\r\n                                />\r\n                            )\r\n                        }\r\n                    </Board>\r\n                </Grid>\r\n                <Grid item xs={12} sm={3} md={2}>\r\n                    <DescriptionList\r\n                        handleCloseToolTips={this.handleCloseToolTips}\r\n                        tipsText={this.state.tipsText}\r\n                    />\r\n                    {this.loadSidebar()}\r\n                </Grid>\r\n                <BoardResetModal\r\n                    createBoard={this.createBoard}\r\n                    width={this.state.width}\r\n                    height={this.state.height}\r\n                    percent={this.state.percent}\r\n                    closeModal={this.closeCreateBoardModal}\r\n                    show={this.state.showBoardResetPanelModal}\r\n                />\r\n                {\r\n                    this.state.playerState.map(position =>\r\n                        this.checkwin(position))\r\n                }\r\n                <PuzzleRushWinModal\r\n                    show={this.state.showPuzzleRushFinishedModal}\r\n                    closeModal={this.closePuzzleRushFinishedModal}\r\n                    numPuzzlesCompleted={this.state.numPuzzlesCompleted}\r\n                    percentile={this.state.puzzleRushPercentileCompleted}\r\n                    averageTime={this.state.averageTime}\r\n                    averageMoves={this.state.averageMoves}\r\n                    differenceOptimal={this.state.differenceOptimal}\r\n                    movesPerSecond={this.state.movesPerSecond}\r\n                    difficulty={this.props.difficulty}\r\n                />\r\n            </Grid>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(Game);\r\n","import React from 'react';\r\nimport Game from '../containers/Game';\r\n\r\nclass CreateGame extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            settingsWidth: 16,\r\n            settingsHeight: 16,\r\n            settingsPercent: .9,\r\n        }\r\n    }\r\n    render () {\r\n        return (\r\n            <Game loadedGame='No'\r\n                  handleLineDirections={this.props.handleLineDirections}\r\n                  LineDirections={this.props.LineDirections}\r\n                  settingsWidth={this.state.settingsWidth}\r\n                  settingsHeight={this.state.settingsHeight}\r\n                  settingsPercent={this.state.settingsPercent}\r\n            />\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default CreateGame;","import React from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport {Card, CardContent} from \"@material-ui/core\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\"\r\n\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        width: \"100%\",\r\n        maxWidth: 360,\r\n        height: 175\r\n    },\r\n\r\n    item: {\r\n        padding: 0\r\n    },\r\n\r\n    upperPadding: {\r\n        paddingTop: 3\r\n    },\r\n\r\n    lowerPadding: {\r\n        paddingBottom: 3\r\n    },\r\n\r\n    rightSideText: {\r\n        textAlign: \"right\",\r\n        marginTop: 0,\r\n        marginBottom: 0\r\n    },\r\n\r\n    leftSideText: {\r\n        marginTop: 0,\r\n        marginBottom: 0\r\n    }\r\n});\r\n\r\nexport default withStyles(styles)(ComplexGrid)\r\n\r\nfunction ComplexGrid(props) {\r\n    const { classes } = props;\r\n    const handleClick = () => {\r\n        props.handleGameClick(props.game.name, props.game.puzzledata,props.highscores,props.game.uri);\r\n    };\r\n\r\n    var numberOfHighScores = 0;\r\n\r\n    const highscorestyle = highscore => {\r\n        if (numberOfHighScores === 5) return \"\";\r\n        numberOfHighScores++;\r\n        return (\r\n            <ListItem disableGutters={true} classes={{ root: classes.item }}>\r\n                <ListItemText primary={trimName(highscore.comment)} classes={{ root: classes.leftSideText }} />\r\n                <ListItemText secondary={highscore.numMoves} classes={{ root: classes.rightSideText }} />\r\n            </ListItem>\r\n        )\r\n    };\r\n\r\n    const contentDivStyle = () => {\r\n        return {\r\n            display: 'flex',\r\n            justifyContent: 'space-between'\r\n        };\r\n\r\n    };\r\n\r\n    const trimName = name => {\r\n        if (name.length > 10)\r\n            name = name.substring(0, 10) + \"...\";\r\n        return name\r\n    };\r\n\r\n\r\n    return (\r\n        <Grid item xs={12} sm={3}>\r\n            <Card variant=\"outlined\" className={classes.root}>\r\n                <CardContent>\r\n                    <div style={contentDivStyle()}>\r\n                        <div style={{width: '125px'}}>\r\n                            <Tooltip title={props.game.name}>\r\n                                <Typography variant=\"h6\" classes={{ root: classes.lowerPadding }}>\r\n                                    {trimName(props.game.name)}\r\n                                </Typography>\r\n                            </Tooltip>\r\n                            <div>\r\n                                <Typography variant=\"caption\">\r\n                                    By: {trimName(props.game.authorname)}\r\n                                </Typography>\r\n                            </div>\r\n                            <div>\r\n                                <Typography variant=\"caption\">\r\n                                    {props.game.created}\r\n                                </Typography>\r\n                            </div>\r\n                            <div>\r\n                                <Typography color=\"textSecondary\" variant=\"caption\">\r\n                                    Plays: {props.highscores.length}\r\n                                </Typography>\r\n                            </div>\r\n                            <br/>\r\n                            <Button onClick={handleClick} classes={{ root: classes.upperPadding }} variant=\"contained\" color=\"primary\">Play</Button>\r\n                        </div>\r\n                        <Divider orientation=\"vertical\" flexItem />\r\n                        <div style={{width: '125px'}}>\r\n                            <Typography color=\"textSecondary\" variant=\"caption\">\r\n                                Top Scores\r\n                            </Typography>\r\n                            <List>\r\n                                {\r\n                                    props.highscores.map(highscore =>\r\n                                        highscorestyle(highscore)\r\n                                    )\r\n                                }\r\n                            </List>\r\n                        </div>\r\n                    </div>\r\n                </CardContent>\r\n            </Card>\r\n        </Grid>\r\n    );\r\n}","import React from 'react';\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport FindGameElements from '../containers/FindGameElements'\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport FilterListIcon from '@material-ui/icons/FilterList'\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport axios from 'axios';\r\nimport Menu from \"@material-ui/core/Menu\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport InputBase from \"@material-ui/core/InputBase\";\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        padding: '2px 4px',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        width: 400,\r\n    },\r\n    input: {\r\n        marginLeft: 5,\r\n        flex: 1,\r\n    },\r\n    iconButton: {\r\n        padding: 10,\r\n    },\r\n    divider: {\r\n        height: 28,\r\n        margin: 4,\r\n        marginLeft: 8,\r\n        marginRight: 8,\r\n    },\r\n});\r\n\r\nclass FindGame extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        var gameslist = this.props.gameslist;\r\n        var highscoreslist = this.props.highscoreslist;\r\n        this.state = {\r\n            gameslist: gameslist,\r\n            highscoreslist: highscoreslist,\r\n            anchorEl: null\r\n        }\r\n    }\r\n\r\n    handleGameClick = (name,gamedata,highscores,uri) => {\r\n        this.props.handleGameClick(name,gamedata,highscores,uri);\r\n    };\r\n\r\n    handleFilterMenuOpen = event => {\r\n        this.setState( {\r\n          anchorEl: event.currentTarget\r\n      });\r\n    };\r\n\r\n    handleCloseFilterMenu = event => {\r\n        this.setState( {\r\n            anchorEl: null\r\n        })\r\n    };\r\n\r\n    handleSearchSubmit = event => {\r\n        var searchTerm = this.searchRef.value;\r\n        axios.post('/search', {search: searchTerm, offset: 0})\r\n            .then( res => {\r\n                this.setState({\r\n                    highscoreslist: JSON.parse(res.data.highscoreslist),\r\n                    gameslist: JSON.parse(res.data.gameslist)\r\n                });\r\n            });\r\n    };\r\n\r\n    render () {\r\n        const  { classes } = this.props;\r\n        return (\r\n            <div id={'GameMain'}>\r\n                <Paper component=\"form\" className={classes.root} >\r\n                    <InputBase\r\n                        className={classes.input}\r\n                        placeholder=\"Search\"\r\n                        inputProps={{ 'aria-label': 'search' }}\r\n                        inputRef={ref => this.searchRef = ref}\r\n                        onKeyPress={(event) => {\r\n                            if (event.key === 'Enter') {\r\n                                this.handleSearchSubmit();\r\n                                event.preventDefault()\r\n                            }\r\n                        }}\r\n                    />\r\n                    <IconButton onClick={this.handleSearchSubmit} className={classes.iconButton} aria-label=\"search\">\r\n                        <SearchIcon />\r\n                    </IconButton>\r\n                    <Divider className={classes.divider} orientation=\"vertical\" />\r\n                    <Button\r\n                        onClick={this.handleFilterMenuOpen}\r\n                        startIcon={<FilterListIcon />}\r\n                        variant=\"contained\"\r\n                        color=\"secondary\"\r\n                    >\r\n                        Sort\r\n                    </Button>\r\n                    <Menu\r\n                        id=\"simple-menu\"\r\n                        anchorEl={this.state.anchorEl}\r\n                        keepMounted\r\n                        open={Boolean(this.state.anchorEl)}\r\n                        onClose={this.handleCloseFilterMenu}\r\n                    >\r\n                        <MenuItem onClick={this.handleCloseFilterMenu}>Most Popular</MenuItem>\r\n                        <MenuItem onClick={this.handleCloseFilterMenu}>Hottest</MenuItem>\r\n                        <MenuItem onClick={this.handleCloseFilterMenu}>Newest</MenuItem>\r\n                    </Menu>\r\n                </Paper>\r\n                <br/>\r\n                <Grid container alignItems={\"stretch\"} spacing={2}>\r\n                    {\r\n                        this.state.gameslist.map((game,index)=>\r\n                            <FindGameElements handleGameClick={this.handleGameClick} game={game} highscores={this.state.highscoreslist[index]} highscore={this.state.highscoreslist[index][0]}/>\r\n                        )\r\n                    }\r\n                </Grid>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default withStyles(styles)(FindGame);","import React from 'react';\r\nimport Game from '../containers/Game';\r\n\r\nclass PlayGame extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <Game\r\n                  handleLineDirections={this.props.handleLineDirections}\r\n                  LineDirections={this.props.LineDirections}\r\n                  loadedGame={'Yes'}\r\n                  name={this.props.name}\r\n                  gamedata={this.props.gamedata}\r\n                  highscores={this.props.highscores}\r\n                  uri={this.props.uri}\r\n             />\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default PlayGame;","import { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  grid: {\r\n    marginTop: '150px',\r\n  },\r\n  homepage: {\r\n    marginTop: '40px',\r\n  },\r\n  griditems: {\r\n    margin: 'auto',\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    margin: 'auto',\r\n    Width: 500,\r\n  },\r\n  image: {\r\n    width: 128,\r\n    height: 128,\r\n  },\r\n  img: {\r\n    margin: 'auto',\r\n    display: 'block',\r\n    maxWidth: '100%',\r\n    maxHeight: '100%',\r\n  },\r\n  baseExpansion: {\r\n    width: '100%',\r\n  },\r\n  heading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    flexBasis: '33.33%',\r\n    flexShrink: 0,\r\n  },\r\n  secondaryHeading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    color: theme.palette.text.secondary,\r\n    marginLeft: '10px'\r\n  },\r\n  darkmode: {\r\n      backgroundColor: 'black',\r\n      color: 'white',\r\n      marginTop: '150px',\r\n  },\r\n  iconcards: {\r\n    width: '250px',\r\n    display: 'inline-block',\r\n    marginLeft: '40px',\r\n    marginTop: '40px',\r\n    marginBotton: '40px',\r\n    marginRight: '40px',\r\n    textAlign: 'center',\r\n  },\r\n  iconcardsDaily: {\r\n    maxWidth: 345,\r\n    minWidth: 250,\r\n    float: 'left',\r\n    marginLeft: '40px',\r\n    marginTop: '40px',\r\n    marginBotton: '40px',\r\n    marginRight: '40px',\r\n    textAlign: 'center',\r\n  },\r\n  titlehome: {\r\n    fontFamily: \"'Epilogue', sans-serif\",\r\n    marginBottom: '30px',\r\n  },\r\n  iconfonts: {\r\n    fontFamily: \"'Arvo', serif\",\r\n  },\r\n  createboardcard: {\r\n    ':hover': {\r\n        content: '/static/images/CreateBoardCardIconPlaced.png',\r\n    }\r\n  },\r\n  demo: {\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n  centeredProfile: {\r\n    marginTop: '20px',\r\n    display: 'inline-block',\r\n  }\r\n}));\r\n\r\nexport default useStyles;","import React from 'react';\r\nimport Game from '../containers/Game';\r\nimport useStyles from '../Material-UI/themes';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport DailyChallengeScores from '../components/DailyChallengeScores';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport {MOBILE_INNER_SCREEN_WIDTH} from \"../constants/constants\";\r\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\r\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport TimerIcon from '@material-ui/icons/Timer';\r\nimport CasinoIcon from '@material-ui/icons/Casino';\r\nimport TodayIcon from '@material-ui/icons/Today';\r\nimport SchoolIcon from '@material-ui/icons/School';\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport FindGameElements from \"../containers/FindGameElements\";\r\n\r\n\r\nexport default function ComplexGrid(props) {\r\n    const classes = useStyles();\r\n\r\n    if (window.innerWidth < MOBILE_INNER_SCREEN_WIDTH) {\r\n        return (<div className={classes.homepage} >\r\n                <Grid container spacing={2}>\r\n                    <Grid item xs={12} spacing={3} alignItems=\"center\" justify=\"center\" style={{textAlign: 'center'}}>\r\n                        <Typography className={classes.titlehome} variant=\"h3\"> Welcome To RobotsEvolved\r\n                        </Typography>\r\n                        <Typography variant=\"p2\" paragraph={true}> Create your own Robots Boards and challenge others to solve them, or play puzzle rush and get better.\r\n                        </Typography>\r\n                        <br/>\r\n                        <img width=\"400\" height=\"225\" src='/static/videos/basic.gif'/>\r\n                        <br/>\r\n                    </Grid>\r\n                    <Grid item xs={12} spacing={3} alignItems=\"center\" justify=\"center\" style={{textAlign: 'center'}} >\r\n                        <Typography className={classes.titlehome} variant=\"h4\"> News\r\n                        </Typography>\r\n                        <Typography> Robots Evolved New Homepage!!! <br/>Almost Done with the project expect a release date of 8/1/2020\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid container item alignItems={\"stretch\"} spacing={2} alignItems=\"center\" justify=\"center\" >\r\n                        <Grid item xs={12} sm={4} style={{textAlign: 'center'}}>\r\n                            <Card className={classes.iconcards}>\r\n                                <CardActionArea onClick={props.handleClickCreateGame}>\r\n                                    <CardMedia\r\n                                        className={classes.createboardcard}\r\n                                        component=\"img\"\r\n                                        alt=\"Create Board\"\r\n                                        height=\"140\"\r\n                                        image=\"/static/images/CreateBoardCardIcon.png\"\r\n                                        title=\"Create Board\"\r\n                                    />\r\n                                    <CardContent>\r\n                                        <Typography gutterBottom className={classes.iconfonts} variant=\"h5\" component=\"h2\">\r\n                                            Create Board\r\n                                        </Typography>\r\n                                    </CardContent>\r\n                                </CardActionArea>\r\n                            </Card>\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={4} style={{textAlign: 'center'}}>\r\n                            <Card className={classes.iconcards}>\r\n                                <CardActionArea onClick={props.handleClickFindGame}>\r\n                                    <CardMedia\r\n                                        component=\"img\"\r\n                                        alt=\"Find a Game\"\r\n                                        height=\"140\"\r\n                                        image=\"/static/images/FindAGameCardIcon.png\"\r\n                                        title=\"Find a Game\"\r\n                                    />\r\n                                    <CardContent>\r\n                                        <Typography gutterBottom className={classes.iconfonts} variant=\"h5\" component=\"h2\">\r\n                                            Find a Game\r\n                                        </Typography>\r\n                                    </CardContent>\r\n                                </CardActionArea>\r\n                            </Card>\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={4} style={{textAlign: 'center'}}>\r\n                            <Card className={classes.iconcards}>\r\n                                <CardActionArea onClick={props.handleClickDailyChallenge}>\r\n                                    <CardMedia\r\n                                        component=\"img\"\r\n                                        alt=\"Create Board\"\r\n                                        height=\"140\"\r\n                                        image=\"/static/images/DailyChallengeIcon.png\"\r\n                                        title=\"Daily Challenge\"\r\n                                    />\r\n                                    <CardContent>\r\n                                        <Typography gutterBottom className={classes.iconfonts} variant=\"h5\" component=\"h2\">\r\n                                            Daily Challenge\r\n                                        </Typography>\r\n                                    </CardContent>\r\n                                </CardActionArea>\r\n                            </Card>\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={4} style={{textAlign: 'center'}}>\r\n                            <Card className={classes.iconcards}>\r\n                                <CardActionArea onClick={props.handleClickRandomGame}>\r\n                                    <CardMedia\r\n                                        component=\"img\"\r\n                                        alt=\"Play a Random Game\"\r\n                                        height=\"140\"\r\n                                        image=\"/static/images/puzzle.png\"\r\n                                        title=\"Play a Random Game\"\r\n                                    />\r\n                                    <CardContent>\r\n                                        <Typography gutterBottom className={classes.iconfonts} variant=\"h5\" component=\"h2\">\r\n                                            Play a Random Game\r\n                                        </Typography>\r\n                                    </CardContent>\r\n                                </CardActionArea>\r\n                            </Card>\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={4} style={{textAlign: 'center'}}>\r\n                            <Card className={classes.iconcards}>\r\n                                <CardActionArea onClick={props.handleClickLearnGame}>\r\n                                    <CardMedia\r\n                                        component=\"img\"\r\n                                        alt=\"Create Board\"\r\n                                        height=\"140\"\r\n                                        image=\"/static/images/LessonsBoardCardIcon.png\"\r\n                                        title=\"Learn\"\r\n                                    />\r\n                                    <CardContent>\r\n                                        <Typography gutterBottom className={classes.iconfonts} variant=\"h5\" component=\"h2\">\r\n                                            Learn\r\n                                        </Typography>\r\n                                    </CardContent>\r\n                                </CardActionArea>\r\n                            </Card>\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={4} style={{textAlign: 'center'}}>\r\n                            <Card className={classes.iconcards}>\r\n                                <CardActionArea onClick={props.handleClickPuzzleRush}>\r\n                                    <CardMedia\r\n                                        component=\"img\"\r\n                                        alt=\"Contemplative Reptile\"\r\n                                        height=\"140\"\r\n                                        image=\"/static/images/PuzzleRushIcon.png\"\r\n                                        title=\"Contemplative Reptile\"\r\n                                    />\r\n                                    <CardContent style={{textAlign: 'center'}}>\r\n                                        <Typography className={classes.iconfonts} gutterBottom variant=\"h5\" component=\"h2\">\r\n                                            Puzzle Rush\r\n                                        </Typography>\r\n                                    </CardContent>\r\n                                </CardActionArea>\r\n                            </Card>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid item xs={12} spacing={3} alignItems=\"center\" justify=\"center\" style={{textAlign: 'center'}} >\r\n                        <Typography className={classes.titlehome} variant=\"h4\"> Daily Challenge Scores\r\n                        </Typography>\r\n                        <DailyChallengeScores highscores={window.dchighscores}/>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (<div className={classes.homepage}>\r\n              <Grid container spacing={4}>\r\n                <Grid item xs={2} spacing={3} alignItems=\"center\" justify=\"center\" style={{textAlign: 'center'}}>\r\n                    <Typography className={classes.titlehome} variant=\"h4\"> Controls\r\n                    </Typography>\r\n                    <Divider />\r\n                        <Typography\r\n                            className={classes.dividerFullWidth}\r\n                            color=\"textSecondary\"\r\n                            display=\"block\"\r\n                            variant=\"caption\"\r\n                        >\r\n                            Movement\r\n                        </Typography>\r\n                    <img width={'20%'} height={'auto'} src={\"/static/images/keyboard.png\"}/>\r\n                    <Typography>Or use mouse button to click on the Robot you want to move</Typography>\r\n                    <Divider />\r\n                        <Typography\r\n                            className={classes.dividerFullWidth}\r\n                            color=\"textSecondary\"\r\n                            display=\"block\"\r\n                            variant=\"caption\"\r\n                        >\r\n                            Selecting robots\r\n                        </Typography>\r\n                        <img width={'20%'} height={'auto'} src={\"/static/images/tab.png\"}/>\r\n\r\n                    <Typography>Or use mouse button to click</Typography>\r\n                    <Divider/>\r\n                        <Typography\r\n                            className={classes.dividerFullWidth}\r\n                            color=\"textSecondary\"\r\n                            display=\"block\"\r\n                            variant=\"caption\"\r\n                        >\r\n                            HotKeys\r\n                        </Typography>\r\n                        <img width={'20%'} height={'auto'} src={\"/static/images/spacebar.png\"}/>\r\n                        <img width={'20%'} height={'auto'} src={\"/static/images/enterkey.png\"}/>\r\n                    <Typography>Undo - Reset</Typography>\r\n                    <Divider />\r\n                    <div style={{marginTop:'100px'}}>\r\n                    <Typography className={classes.titlehome} variant=\"h4\"> News\r\n                    </Typography>\r\n                    <Typography> Robots Evolved New Homepage!!! <br/>Almost Done with the project expect a release date of 8/1/2020\r\n                    </Typography>\r\n                    </div>\r\n\r\n\r\n                </Grid>\r\n                <Grid item xs={8} spacing={3} alignItems=\"center\" justify=\"center\" style={{textAlign: 'center'}}>\r\n                    <Typography className={classes.titlehome} variant=\"h3\"> Welcome To RobotsEvolved\r\n                    </Typography>\r\n                    <Typography variant=\"p2\"> Create your own Robots Boards and challenge others to solve them, or play puzzle rush and get better.\r\n                    </Typography>\r\n                    <br/>\r\n                        <img width=\"400\" height=\"225\" src='/static/videos/basic.gif'/>\r\n                    <br/>\r\n                    <Card className={classes.iconcards}>\r\n                              <CardActionArea onClick={props.handleClickCreateGame}>\r\n                                <CardMedia\r\n                                  className={classes.createboardcard}\r\n                                  component=\"img\"\r\n                                  alt=\"Create Board\"\r\n                                  height=\"140\"\r\n                                  image=\"/static/images/CreateBoardCardIcon.png\"\r\n                                  title=\"Create Board\"\r\n                                />\r\n                                <CardContent>\r\n                                  <Typography gutterBottom className={classes.iconfonts} variant=\"h5\" component=\"h2\">\r\n                                    Create Board\r\n                                  </Typography>\r\n                                </CardContent>\r\n                              </CardActionArea>\r\n                            </Card>\r\n                            <Card className={classes.iconcards}>\r\n                              <CardActionArea onClick={props.handleClickFindGame}>\r\n                                <CardMedia\r\n                                  component=\"img\"\r\n                                  alt=\"Find a Game\"\r\n                                  height=\"140\"\r\n                                  image=\"/static/images/FindAGameCardIcon.png\"\r\n                                  title=\"Find a Game\"\r\n                                />\r\n                                <CardContent>\r\n                                  <Typography gutterBottom className={classes.iconfonts} variant=\"h5\" component=\"h2\">\r\n                                    Find a Game\r\n                                  </Typography>\r\n                                </CardContent>\r\n                              </CardActionArea>\r\n                            </Card>\r\n                            <Card className={classes.iconcards}>\r\n                              <CardActionArea onClick={props.handleClickDailyChallenge}>\r\n                                <CardMedia\r\n                                  component=\"img\"\r\n                                  alt=\"Create Board\"\r\n                                  height=\"140\"\r\n                                  image=\"/static/images/DailyChallengeIcon.png\"\r\n                                  title=\"Daily Challenge\"\r\n                                />\r\n                                <CardContent>\r\n                                  <Typography gutterBottom className={classes.iconfonts} variant=\"h5\" component=\"h2\">\r\n                                    Daily Challenge\r\n                                  </Typography>\r\n                                </CardContent>\r\n                              </CardActionArea>\r\n                            </Card>\r\n                            <Card className={classes.iconcards}>\r\n                    <CardActionArea onClick={props.handleClickRandomGame}>\r\n                        <CardMedia\r\n                            component=\"img\"\r\n                            alt=\"Play a Random Game\"\r\n                            height=\"140\"\r\n                            image=\"/static/images/puzzle.png\"\r\n                            title=\"Play a Random Game\"\r\n                        />\r\n                        <CardContent>\r\n                            <Typography gutterBottom className={classes.iconfonts} variant=\"h5\" component=\"h2\">\r\n                                Play a Random Game\r\n                            </Typography>\r\n                        </CardContent>\r\n                    </CardActionArea>\r\n                </Card>\r\n                    <Card className={classes.iconcards}>\r\n                        <CardActionArea onClick={props.handleClickLearnGame}>\r\n                            <CardMedia\r\n                                component=\"img\"\r\n                                alt=\"Create Board\"\r\n                                height=\"140\"\r\n                                image=\"/static/images/LessonsBoardCardIcon.png\"\r\n                                title=\"Learn\"\r\n                            />\r\n                            <CardContent>\r\n                                <Typography gutterBottom className={classes.iconfonts} variant=\"h5\" component=\"h2\">\r\n                                    Learn\r\n                                </Typography>\r\n                            </CardContent>\r\n                        </CardActionArea>\r\n                    </Card>\r\n                    <Card className={classes.iconcards}>\r\n                        <CardActionArea onClick={props.handleClickPuzzleRush}>\r\n                            <CardMedia\r\n                                component=\"img\"\r\n                                alt=\"Contemplative Reptile\"\r\n                                height=\"140\"\r\n                                image=\"/static/images/PuzzleRushIcon.png\"\r\n                                title=\"Contemplative Reptile\"\r\n                            />\r\n                            <CardContent style={{textAlign: 'center'}}>\r\n                                <Typography className={classes.iconfonts} gutterBottom variant=\"h5\" component=\"h2\">\r\n                                    Puzzle Rush\r\n                                </Typography>\r\n                            </CardContent>\r\n                        </CardActionArea>\r\n                    </Card>\r\n                </Grid>\r\n                <Grid item xs={2} spacing={3} alignItems=\"center\" justify=\"center\" style={{textAlign: 'center'}}>\r\n                <Typography className={classes.titlehome} variant=\"h4\"> Daily Challenge Scores\r\n                </Typography>\r\n                <DailyChallengeScores highscores={window.dchighscores}/>\r\n                </Grid>\r\n              </Grid>\r\n           </div>\r\n    )\r\n}","import React from \"react\";\r\nimport \"./modal.css\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport { FaCrown } from 'react-icons/fa';\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nconst stylecol = () => {\r\n    return({\r\n            float: 'left',\r\n            width: '50%',\r\n            margin: 'auto',\r\n            padding: '0 50px',\r\n            marginTop: '6px',\r\n    });\r\n}\r\n\r\nconst spacing = () => {\r\n    return({\r\n            marginBottom: '10px',\r\n    });\r\n}\r\n\r\nexport default class LoginModal extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    loginGoogle = event => {\r\n        event.preventDefault();\r\n        window.location.href = \"/login/google\";\r\n    };\r\n\r\n    render () {\r\n        return (\r\n            <Dialog onClose={this.props.closeLoginModal}\r\n                    aria-labelledby=\"customized-dialog-title\"\r\n                    open={this.props.show}\r\n                    maxWidth={\"xs\"}\r\n            >\r\n                <DialogTitle id=\"customized-dialog-title\" onClose={this.props.closeLoginModal}>Login to RobotsEvolved</DialogTitle>\r\n                <DialogContent dividers>\r\n                        <Typography style={spacing()} variant=\"body2\" display=\"inline\">\r\n                           • Gain <FaCrown/>s when winning the Daily Challenge (stacks)\r\n                        </Typography>\r\n                        <br/>\r\n                        <Typography style={spacing()} variant=\"body2\" display=\"inline\">\r\n                            • Saving settings and your moves in the daily challenge\r\n                        </Typography>\r\n                        <br/>\r\n                        <Typography variant=\"body2\" display=\"inline\">\r\n                            • Profile Page to keep track of your submissions.\r\n                        </Typography>\r\n                    <div class=\"col\">\r\n                        <a href=\"#\" id={\"buttonfb\"}>\r\n                          <i class=\"fa fa-facebook fa-fw\"></i> Login with Facebook\r\n                         </a>\r\n                        <a onClick={this.loginGoogle} href=\"#\" id={\"buttongoogle\"}><i class=\"fa fa-google fa-fw\">\r\n                          </i> Login with Google\r\n                        </a>\r\n                    </div>\r\n                    <Typography variant=\"caption\" display=\"block\">\r\n                            We will NEVER distribute/sell your email or profileID.\r\n                    </Typography>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={this.props.closeLoginModal}>Close</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n            )\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nconst style = () => {\r\n    return {\r\n        borderRadius: '50%',\r\n        height: '40px',\r\n        width: '40px',\r\n        marginTop: '5px',\r\n    };\r\n};\r\n\r\nconst divStyle = () => {\r\n    return {\r\n        display: 'inline-flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'space-evenly',\r\n        width: '200px',\r\n    };\r\n};\r\n\r\nexport default class LoggedInUser extends React.Component {\r\n\r\n    render () {\r\n        if (window.loggedin == 'No') {\r\n            return null\r\n        }\r\n        else {\r\n            return (\r\n                <div style={divStyle()}>\r\n                    <div>{window.userInfo.username}</div>\r\n                    <div class=\"dasher\">\r\n                        <img src={window.userInfo.profilePicture} style={style()}/>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}","import React from 'react';\r\n\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nexport default class SignInButton extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    handleClick = event => {\r\n        if (window.loggedin == 'Yes') {\r\n            return this.props.onClick('Logout');\r\n        }\r\n        else {\r\n            return this.props.onClick('Sign in');\r\n        }\r\n    }\r\n\r\n\r\n\r\n    render () {\r\n        if (window.loggedin == 'Yes') {\r\n            var textToShow = 'Logout';\r\n        }\r\n        else {\r\n            var textToShow = 'Sign in';\r\n        }\r\n        return (\r\n            <Button color=\"primary\" onClick={this.handleClick}>{textToShow}</Button>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\r\nimport Input from \"@material-ui/core/Input\";\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport axios from 'axios';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\n\r\n\r\nconst divStyle = () => {\r\n    return ({\r\n            display: 'flex',\r\n            marginTop: '50px',\r\n            marginBottom: '50px'\r\n        });\r\n}\r\n\r\nclass PuzzleRushDifficultyModal extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isLoading: false,\r\n            value: 'classic',\r\n        }\r\n    }\r\n\r\n    handleClose = () => {\r\n        this.props.show = false;\r\n    };\r\n\r\n    handleClickPuzzleRushModal = (difficulty) => {\r\n        console.log(difficulty)\r\n        axios.post('/puzzlerush', {difficulty: difficulty, action: 'start',type: this.state.value})\r\n                .then( res => {\r\n                        var games = JSON.parse(res.data.games);\r\n                        var p_id = res.data.p_id;\r\n                        this.setState({\r\n                            isLoading: false,\r\n                        });\r\n                        this.props.handleClickPuzzleRush(difficulty,games,p_id);\r\n                });\r\n    };\r\n\r\n    handleClickEasyPuzzleRush = (event) => {\r\n        event.preventDefault();\r\n        this.handleClickPuzzleRushModal('easy',this.state.value)\r\n        this.setState({\r\n            isLoading: true\r\n        })\r\n    }\r\n\r\n    handleClickMediumPuzzleRush = (event) => {\r\n        event.preventDefault();\r\n        this.handleClickPuzzleRushModal('medium',this.state.value)\r\n        this.setState({\r\n            isLoading: true\r\n        })\r\n    }\r\n\r\n    handleClickHardPuzzleRush = (event) => {\r\n        event.preventDefault();\r\n        this.handleClickPuzzleRushModal('hard',this.state.value)\r\n        this.setState({\r\n            isLoading: true\r\n        })\r\n    }\r\n\r\n    handleClickExHardPuzzleRush = (event) => {\r\n        event.preventDefault();\r\n        this.handleClickPuzzleRushModal('Exteremly Hard',this.state.value)\r\n        this.setState({\r\n            isLoading: true\r\n        })\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        this.setState(\r\n            {value: event.target.value}\r\n        )\r\n    }\r\n\r\n\r\n    render () {\r\n        return (\r\n            <Dialog onClose={this.handleClose}\r\n                    aria-labelledby=\"customized-dialog-title-2\"\r\n                    open={this.props.show}\r\n                    maxWidth={\"xs\"}\r\n                    fullWidth={true}\r\n            >\r\n                <DialogTitle id=\"customized-dialog-title-2\" onClose={this.handleClose}>Select a Difficulty</DialogTitle>\r\n                <DialogContent dividers>\r\n                                {this.state.isLoading ? (\r\n                                    <Grid\r\n                                        container xs={12}\r\n                                        spacing={4}\r\n                                        direction=\"column\"\r\n                                        alignItems=\"center\"\r\n                                        justify=\"center\"\r\n                                        wrap=\"nowrap\"\r\n                                    >\r\n                                        <div style={divStyle()}>\r\n                                              <CircularProgress />\r\n                                         </div>\r\n                                    </Grid>\r\n                                                        ) : (\r\n                                    <Grid\r\n                                        container xs={12}\r\n                                        spacing={4}\r\n                                        alignItems=\"center\"\r\n                                        justify=\"center\"\r\n                                        wrap=\"nowrap\"\r\n                                    >\r\n                                         <Grid item xs={6}>\r\n                                         <ButtonGroup\r\n                                            orientation=\"vertical\"\r\n                                            color=\"primary\"\r\n                                            aria-label=\"vertical outlined primary button group\"\r\n                                          >\r\n                                            <Button onClick={this.handleClickEasyPuzzleRush} variant=\"contained\" color=\"primary\">\r\n                                                Easy\r\n                                            </Button>\r\n                                            <Button onClick={this.handleClickMediumPuzzleRush} variant=\"contained\" color=\"primary\">\r\n                                                Medium\r\n                                            </Button>\r\n                                            <Button onClick={this.handleClickHardPuzzleRush} variant=\"contained\" color=\"primary\">\r\n                                                Hard\r\n                                            </Button>\r\n                                            <Button onClick={this.handleClickExHardPuzzleRush} variant=\"contained\" color=\"primary\">\r\n                                                Exteremely Hard\r\n                                            </Button>\r\n                                          </ButtonGroup>\r\n                                        </Grid>\r\n                                        <Grid item xs={6}>\r\n                                            <FormControl component=\"fieldset\">\r\n                                              <FormLabel component=\"legend\">Game Type</FormLabel>\r\n                                              <RadioGroup aria-label=\"game type\" name=\"gametype\" value={this.state.value} onChange={this.handleChange}>\r\n                                                <FormControlLabel value=\"classic\" control={<Radio />} label=\"Classic\" />\r\n                                                <FormControlLabel value=\"random\" control={<Radio />} label=\"Random\" />\r\n                                              </RadioGroup>\r\n                                            </FormControl>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                            )}\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={this.props.closeModal}>Close</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        )\r\n    };\r\n\r\n\r\n}\r\n\r\nexport default PuzzleRushDifficultyModal;\r\n\r\n","import React from 'react';\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\r\nimport Input from \"@material-ui/core/Input\";\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport axios from 'axios';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\n\r\nconst divStyle = () => {\r\n    return ({\r\n            display: 'flex',\r\n            marginTop: '50px',\r\n            marginBottom: '50px'\r\n        });\r\n}\r\n\r\nclass PuzzleRushDifficultyModal extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isLoading: false,\r\n            value: 'classic',\r\n        }\r\n    }\r\n\r\n    handleClose = () => {\r\n        this.props.show = false;\r\n    };\r\n\r\n    handleClickRandomGameModal = (difficulty,type) => {\r\n        axios.get('/randomgame?difficulty=' + difficulty + '&type=' + type)\r\n            .then( res => {\r\n                var game = JSON.parse(res.data.game);\r\n                this.setState({\r\n                    isLoading: false,\r\n                });\r\n                this.props.handleClickRandomGame(game,difficulty);\r\n            })\r\n    }\r\n\r\n    handleClickEasy = event => {\r\n        event.preventDefault();\r\n        this.handleClickRandomGameModal('easy',this.state.value)\r\n        this.setState({\r\n            isLoading: true\r\n        })\r\n    }\r\n\r\n    handleClickMedium = event => {\r\n        event.preventDefault();\r\n         this.handleClickRandomGameModal('medium',this.state.value)\r\n        this.setState({\r\n            isLoading: true\r\n        })\r\n    }\r\n\r\n    handleClickHard = event => {\r\n        event.preventDefault();\r\n         this.handleClickRandomGameModal('hard',this.state.value)\r\n        this.setState({\r\n            isLoading: true\r\n        })\r\n    }\r\n\r\n    handleClickExHard = event => {\r\n        event.preventDefault();\r\n        this.handleClickRandomGameModal('Exteremly Hard',this.state.value)\r\n        this.setState({\r\n            isLoading: true\r\n        })\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        this.setState(\r\n            {value: event.target.value}\r\n        )\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <Dialog onClose={this.handleClose}\r\n                    aria-labelledby=\"customized-dialog-title-2\"\r\n                    open={this.props.show}\r\n                    maxWidth={\"xs\"}\r\n                    fullWidth={true}\r\n            >\r\n                <DialogTitle id=\"customized-dialog-title-2\" onClose={this.handleClose}>Select a Difficulty</DialogTitle>\r\n                <DialogContent dividers>\r\n                            {this.state.isLoading ? (\r\n                                    <Grid\r\n                                        container xs={12}\r\n                                        spacing={4}\r\n                                        direction=\"column\"\r\n                                        alignItems=\"center\"\r\n                                        justify=\"center\"\r\n                                        wrap=\"nowrap\"\r\n                                    >\r\n                                        <div style={divStyle()}>\r\n                                              <CircularProgress />\r\n                                         </div>\r\n                                    </Grid>\r\n                            ) : (\r\n                            <Grid\r\n                                container xs={12}\r\n                                spacing={4}\r\n                                alignItems=\"center\"\r\n                                justify=\"center\"\r\n                                wrap=\"nowrap\"\r\n                            >\r\n                                <Grid item xs={6}>\r\n                                    <ButtonGroup\r\n                                        orientation=\"vertical\"\r\n                                        color=\"primary\"\r\n                                        aria-label=\"vertical outlined primary button group\"\r\n                                      >\r\n                                        <Button onClick={this.handleClickEasy} variant=\"contained\" color=\"primary\">\r\n                                            Easy\r\n                                        </Button>\r\n                                        <Button onClick={this.handleClickMedium} variant=\"contained\" color=\"primary\">\r\n                                            Medium\r\n                                        </Button>\r\n                                        <Button onClick={this.handleClickHard} variant=\"contained\" color=\"primary\">\r\n                                            Hard\r\n                                        </Button>\r\n                                        <Button onClick={this.handleClickExHard} variant=\"contained\" color=\"primary\">\r\n                                            Extremely Hard\r\n                                        </Button>\r\n                                     </ButtonGroup>\r\n                                </Grid>\r\n                                <Grid item xs={6}>\r\n                                    <FormControl component=\"fieldset\">\r\n                                      <FormLabel component=\"legend\">Game Type</FormLabel>\r\n                                      <RadioGroup aria-label=\"game type\" name=\"gametype\" value={this.state.value} onChange={this.handleChange}>\r\n                                        <FormControlLabel value=\"classic\" control={<Radio />} label=\"Classic\" />\r\n                                        <FormControlLabel value=\"random\" control={<Radio />} label=\"Random\" />\r\n                                      </RadioGroup>\r\n                                    </FormControl>\r\n                                </Grid>\r\n                            </Grid>\r\n                            )}\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={this.props.closeModal}>Close</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        )\r\n    };\r\n\r\n\r\n}\r\n\r\nexport default PuzzleRushDifficultyModal;\r\n\r\n","import React from 'react';\r\n\r\n\r\nconst mainStyle = () => {\r\n    return {\r\n        marginRight: '25px',\r\n        marginTop: '25px',\r\n        marginBottom: '50px',\r\n        marginLeft: '50px',\r\n        paddingRight: '25px',\r\n        paddingLeft: '25px',\r\n        paddingTop: '25px',\r\n        paddingBottom: '25px',\r\n        float: 'left',\r\n    }\r\n}\r\n\r\nconst highscoresStyle = () => {\r\n    return {\r\n        marginRight: '5px',\r\n        marginTop: '15px',\r\n        marginBottom: '15px',\r\n    }\r\n\r\n}\r\n\r\n\r\nclass GameListItemView extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    handleGameClick = () => {\r\n        this.props.handleGameClick(this.props.game.puzzledata,this.props.highscores,this.props.game.uri);\r\n    }\r\n\r\n\r\n render() {\r\n        var highscore = this.props.highscore;\r\n        if (typeof highscore === 'undefined') {\r\n            highscore = {\r\n                comment: '',\r\n                numMoves: '',\r\n            }\r\n        }\r\n        return (\r\n        <div style={mainStyle()}>\r\n            <div>\r\n                <h2 onClick={this.handleGameClick}>{this.props.game.name}</h2>\r\n            </div>\r\n            <div style={highscoresStyle()}><h4>Highscore:</h4>\r\n                <div><div>{highscore.comment}</div><div>{highscore.numMoves}</div></div>\r\n            </div>\r\n        </div>\r\n        )\r\n    }\r\n}\r\nexport default GameListItemView","import React from 'react';\r\n\r\nconst buttonpanel = () => {\r\n    return {\r\n        marginRight: '5px',\r\n        marginTop: '15px',\r\n        marginBottom: '15px',\r\n        float: 'left',\r\n    };\r\n}\r\nclass SearchBarFindGame extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <form onSubmit={this.props.submitSearch} style={buttonpanel()}>\r\n                    <button type=\"submit\">Search</button>\r\n                </form>\r\n                <input style={buttonpanel()} id={\"searchBarFindGame\"} type={\"text\"} placeholder={\"Search\"}>\r\n                </input>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchBarFindGame;\r\n","import React from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nexport default function ProfilePageCreatedGamesDetails(props) {\r\n    const handleClickPlayGame = () => {\r\n        props.handleClickPlayGame(props.game.name,props.game.puzzledata,[],props.game.uri);\r\n    }\r\n\r\n    return (<div>\r\n            <Grid container xs={12}>\r\n                <Grid item xs={6}>\r\n                    <Typography> Highscore Holder: </Typography>\r\n                </Grid>\r\n                 <Grid item xs={6}>\r\n                  <Typography>\r\n                    {props.game.username} - {props.game.numMoves}\r\n                  </Typography>\r\n              </Grid>\r\n              </Grid>\r\n              <Button onClick={handleClickPlayGame} variant=\"contained\" color=\"primary\">\r\n                    Play\r\n              </Button>\r\n            </div>\r\n    );\r\n}","import React from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nexport default function ProfilePageSolutionDetails(props) {\r\n    const handleClickPlayGame = () => {\r\n        props.handleClickPlayGame(props.solution.name,props.solution.puzzledata,[],props.solution.uri);\r\n    }\r\n    return (<div>\r\n              <Grid container xs={12}>\r\n                <Grid item xs={6}>\r\n                    <Typography color={'secondary'} variant={'body2'}> {props.solution.WinnerCreated} </Typography>\r\n                </Grid>\r\n                 <Grid item xs={6}>\r\n                  <Typography>\r\n                    {props.solution.WinnerUsername} - {props.solution.numMoves}\r\n                  </Typography>\r\n              </Grid>\r\n              </Grid>\r\n              <Button onClick={handleClickPlayGame} variant=\"contained\" color=\"primary\">\r\n                    Play\r\n              </Button>\r\n            </div>\r\n    );\r\n}","import React from 'react';\r\nimport Game from '../containers/Game';\r\nimport Button from '@material-ui/core/Button';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport GameListItemView from '../components/GameListItemView';\r\nimport SearchBarFindGame from '../components/SearchBarFindGame';\r\nimport FindGameElements from '../containers/FindGameElements'\r\nimport Grid from '@material-ui/core/Grid';\r\nimport axios from 'axios';\r\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\r\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\r\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport useStyles from '../Material-UI/themes';\r\nimport ProfilePageCreatedGamesDetails from '../components/ProfilePageComponents/ProfilePageCreatedGamesDetails';\r\nimport ProfilePageSolutionDetails from '../components/ProfilePageComponents/ProfilePageSolutionDetails';\r\nimport { FaCrown } from 'react-icons/fa';\r\n\r\n\r\n\r\nexport default function ProfilePage(props) {\r\n    const classes = useStyles();\r\n    const submitAnswer = () => {\r\n        axios.post('/userUpdate',{newuser: document.getElementById(\"ProfileName\").value})\r\n            .then( res => {\r\n                if (res.data == 'OK') {\r\n                    window.location.href = '/';\r\n                }\r\n                else {\r\n                    setError(res.data);\r\n                }\r\n            });\r\n    };\r\n\r\n    const [error, setError] = React.useState(null)\r\n    const [expandedGame, setExpandedGame] = React.useState(false);\r\n    const [expandedHighscores, setExpandedHighscores] = React.useState(false);\r\n    const handleChangeGame = (panel) => (event, isExpandedGame) => {\r\n        setExpandedGame(isExpandedGame ? panel : false);\r\n    };\r\n    const handleChangeHighscores = (panel) => (event, isExpandedHighScores) => {\r\n        setExpandedHighscores(isExpandedHighScores ? panel : false);\r\n    };\r\n    console.log(props.puzzlerushview);\r\n    return (\r\n            <div id={'GameMain'} className={classes.root}>\r\n                <Grid container spacing={4} alignItems={\"stretch\"}>\r\n                    <Grid item xs={12} justify={\"center\"} alignItems={\"center\"}>\r\n                        <TextField className={classes.centeredProfile} id={\"ProfileName\"} label={\"Username\"} defaultValue={window.userInfo.username}/>\r\n                        <Button className={classes.centeredProfile} variant=\"contained\" color=\"secondary\" onClick={submitAnswer}>Change Username</Button>\r\n                        <Typography color={\"secondary\"}>{error}</Typography>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} md={4}>\r\n                        <Typography className={classes.titlehome} variant=\"h3\">Games Created</Typography>\r\n                        {\r\n                            props.gamesview.map((game,index) =>\r\n                                    <ExpansionPanel expanded={expandedGame === 'panelgame' + index} onChange={handleChangeGame('panelgame' + index)}>\r\n                                        <ExpansionPanelSummary\r\n                                          expandIcon={<ExpandMoreIcon />}\r\n                                          aria-controls={\"panel\" + index + \"-content\"}\r\n                                          id={\"panel\" + index + \"-header\"}\r\n                                        >\r\n                                          <Typography className={classes.heading}>{game.name}</Typography>\r\n                                          <Typography className={classes.secondaryHeading}>Plays: </Typography>\r\n                                        </ExpansionPanelSummary>\r\n                                        <ExpansionPanelDetails>\r\n                                          <ProfilePageCreatedGamesDetails\r\n                                            game={game}\r\n                                            handleClickPlayGame={props.handleClickPlayGame}\r\n                                          />\r\n                                        </ExpansionPanelDetails>\r\n                                    </ExpansionPanel>\r\n                            )\r\n                        }\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} md={4}>\r\n                        <Typography className={classes.titlehome} variant=\"h3\">Games Solved</Typography>\r\n                        {\r\n                            props.solutionsview.map((solution,index) =>\r\n                                <ExpansionPanel expanded={expandedHighscores === 'panelhigh' + index} onChange={handleChangeHighscores('panelhigh' + index)}>\r\n                                    <ExpansionPanelSummary\r\n                                      expandIcon={<ExpandMoreIcon />}\r\n                                      aria-controls={\"panel\" + index + \"-content\"}\r\n                                      id={\"panel\" + index + \"-header\"}\r\n                                    >\r\n                                      <Typography className={classes.heading}>{solution.name}</Typography>\r\n                                      <Typography className={classes.secondaryHeading}>Best: {solution.numMoves}</Typography>\r\n                                      {solution.WinnerUserId == window.userInfo.userID ? <FaCrown style={{marginLeft: '30px'}}/> : null}\r\n                                    </ExpansionPanelSummary>\r\n                                    <ExpansionPanelDetails>\r\n                                        <ProfilePageSolutionDetails\r\n                                            solution={solution}\r\n                                            handleClickPlayGame={props.handleClickPlayGame}\r\n                                        />\r\n                                    </ExpansionPanelDetails>\r\n                                </ExpansionPanel>\r\n                            )\r\n                        }\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} md={4}>\r\n                        <Typography className={classes.titlehome} variant=\"h3\">Puzzle Rush Data:</Typography>\r\n                        <Paper>\r\n                              <Typography className={classes.heading}>Easy</Typography>\r\n                              <Typography className={classes.secondaryHeading}>Best Score: {props.puzzlerushview.maxeasy}</Typography>\r\n                              <Typography>\r\n                                Average Score: {props.puzzlerushview.averageeasy}\r\n                              </Typography>\r\n                              <Typography>\r\n                                Average Difference of Moves from Optimal Solution: {props.puzzlerushview.averagediffeasy}\r\n                              </Typography>\r\n                          </Paper>\r\n                          <br/>\r\n                          <Paper>\r\n                              <Typography className={classes.heading}>Medium</Typography>\r\n                              <Typography className={classes.secondaryHeading}>Best Score: {props.puzzlerushview.maxmedium}</Typography>\r\n                              <Typography>\r\n                                Average Score: {props.puzzlerushview.averagemedium}\r\n                              </Typography>\r\n                              <Typography>\r\n                                Average Difference of Moves from Optimal Solution: {props.puzzlerushview.averagediffmedium}\r\n                              </Typography>\r\n                            </Paper>\r\n                            <br/>\r\n                            <Paper>\r\n                              <Typography className={classes.heading}>Hard</Typography>\r\n                              <Typography className={classes.secondaryHeading}>Best Score: {props.puzzlerushview.maxhard}</Typography>\r\n                              <Typography>\r\n                                Average Score: {props.puzzlerushview.averagehard}\r\n                              </Typography>\r\n                              <Typography>\r\n                                Average Difference of Moves from Optimal Solution: {props.puzzlerushview.averagediffhard}\r\n                              </Typography>\r\n                            </Paper>\r\n                            <br/>\r\n                            <Paper>\r\n                              <Typography className={classes.heading}>Extremely Hard</Typography>\r\n                              <Typography className={classes.secondaryHeading}>Best Score: {props.puzzlerushview.maxexhard}</Typography>\r\n                              <Typography>\r\n                                Average Score: {props.puzzlerushview.averageexhard}\r\n                              </Typography>\r\n                              <Typography>\r\n                                Average Difference of Moves from Optimal Solution: {props.puzzlerushview.averagediffexhard}\r\n                              </Typography>\r\n                            </Paper>\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n    )\r\n}","import React from 'react';\r\nimport Game from '../containers/Game';\r\n\r\nexport default function RandomGamePage(props) {\r\n    return (\r\n        <Game\r\n              handleLineDirections={props.handleLineDirections}\r\n              LineDirections={props.LineDirections}\r\n              randomGame={'Yes'}\r\n              game={props.game}\r\n              difficulty={props.difficulty}\r\n         />\r\n    )\r\n}","import React from 'react';\r\nimport Game from '../containers/Game';\r\n\r\nclass PuzzleRushPage extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <Game\r\n                  handleLineDirections={this.props.handleLineDirections}\r\n                  LineDirections={this.props.LineDirections}\r\n                  puzzleRush={'Yes'}\r\n                  p_id={this.props.p_id}\r\n                  games={this.props.games}\r\n                  difficulty={this.props.difficulty}\r\n             />\r\n        )\r\n    }\r\n}\r\n\r\nexport default PuzzleRushPage;","import React from 'react';\r\nimport Game from '../containers/Game';\r\n\r\nclass LessonsPage extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <Game\r\n                handleLineDirections={this.props.handleLineDirections}\r\n                LineDirections={this.props.LineDirections}\r\n                learnMode={'Yes'}\r\n                games={window.learngameslist}/>\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default LessonsPage;","import React from 'react';\r\nimport Game from '../containers/Game';\r\n\r\nclass DailyChallengePage extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <Game handleClickDailyChallenge={this.props.handleClickDailyChallenge} handleLineDirections={this.props.handleLineDirections} LineDirections={this.props.LineDirections} dailyChallengeMode={'Yes'} playerStateList={this.props.playerStateList} savedMoves={this.props.savedMoves} games={this.props.dailyChallengeGameslist} dc_id={this.props.dc_id} highscores={this.props.dchighscores}\r\n             />\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default DailyChallengePage;","import React from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {Card} from \"@material-ui/core\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\n\r\nexport default function AboutUs(props) {\r\n    return (<div id=\"GameMain\">\r\n                <Grid container spacing={4} alignItems={\"stretch\"}>\r\n                    <Grid item spacing={4} xs={12} justify={\"center\"} alignItems={\"center\"}>\r\n                        <Typography variant={'body1'}>\r\n                            RobotsEvolved.com is based on the board game Ricochet Robots.\r\n                            We have several game modes and variants that are inspired by the several Chess variants on the internet.\r\n                            If you use Google Login or Facebook Login we will never email or sell your information.\r\n                            Tell your friends about the site and get people on here!\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid spacing={4} item xs={12} sm={6} justify={\"center\"} alignItems={\"center\"}>\r\n                        <Card style={{height: \"350px\"}}>\r\n                            <CardContent>\r\n                                <Typography color={'textPrimary'} variant={\"h4\"}>\r\n                                    Classic\r\n                                </Typography>\r\n                                <Typography variant={\"body1\"} paragraph={true}>\r\n                                    Classic Puzzles are based on the original Game. These Puzzles only have walls that are L shaped and a goal is in the center of one of them.\r\n                                </Typography>\r\n                                <Typography variant={\"h4\"} display={\"inline\"}>\r\n                                    Random\r\n                                </Typography>\r\n                                <Typography variant={\"body1\"} paragraph={true}>\r\n                                    Random Puzzles are created by having a 10% chance for a wall to spawn in Any location possible wall location, Goals and Robot placements are completely random also.\r\n                                </Typography>\r\n                            </CardContent>\r\n                        </Card>\r\n                    </Grid>\r\n                    <Grid spacing={4} item xs={12} sm={6} justify={\"center\"} alignItems={\"center\"}>\r\n                        <Card style={{height: \"350px\"}}>\r\n                            <CardContent>\r\n                                <Typography variant={\"h5\"}>\r\n                                    Easy\r\n                                </Typography>\r\n                                <Typography variant={\"body2\"} paragraph={true}>\r\n                                    Puzzles of this difficulty always can be solved in 5-8 Moves\r\n                                </Typography>\r\n                                <Typography variant={\"h5\"}>\r\n                                    Medium\r\n                                </Typography>\r\n                                <Typography variant={\"body2\"} paragraph={true}>\r\n                                    Puzzles of this difficulty always can be solved in 9-13 Moves\r\n                                </Typography>\r\n                                <Typography variant={\"h5\"}>\r\n                                    Hard\r\n                                </Typography>\r\n                                <Typography variant={\"body2\"} paragraph={true}>\r\n                                    Puzzles of this difficulty always can be solved in 13-18 Moves\r\n                                </Typography>\r\n                                <Typography variant={\"h5\"} >\r\n                                    Extremely Hard\r\n                                </Typography>\r\n                                <Typography variant={\"body2\"} paragraph={true}>\r\n                                    Puzzles of this difficulty always can be solved in 18-23 Moves\r\n                                </Typography>\r\n                                <Typography variant={\"h5\"}>\r\n                                    God Tier\r\n                                </Typography>\r\n                                <Typography variant={\"body2\"} paragraph={true}>\r\n                                    Puzzles of this difficulty always can be solved in over 23 Moves\r\n                                </Typography>\r\n                            </CardContent>\r\n                        </Card>\r\n                    </Grid>\r\n                    <Grid item spacing={4} xs={12} sm={4} justify={\"center\"} alignItems={\"center\"}>\r\n                        <Paper class=\"card3\">\r\n                          <img src={\"/static/images/284457_10151211078621477_839164197_n.jpg\"} alt=\"Jane\"/>\r\n                          <div class=\"container3\">\r\n                            <h2>Kyle Kwasniewski</h2>\r\n                            <p class=\"title3\">Creator &amp; FullStack Dev.</p>\r\n                            <p>I work in Software Development and Dev-Ops in New York and consider myself a Ricochet Robots enthusiast so I decided to make this application as a way to better hone my skill in web frameworks as well as pass the time during the quarantine. If you find any bugs or feature requests for robotsevolved please let me know by emailing me below. Ill get to developing the feature/fixing annoying bugs.</p>\r\n                            <p>Thanks for playing!</p>\r\n                            <p>robotsevolved@gmail.com</p>\r\n                          </div>\r\n                        </Paper>\r\n                    </Grid>\r\n                    <Grid item spacing={4} xs={12} sm={4} justify={\"center\"} alignItems={\"center\"}>\r\n                        <div className=\"card3\" style={{height: \"480px\"}}>\r\n                            <img src={\"/static/images/284f909d-0d5c-4ae1-b100-76c9d46ae7d4.png\"} alt=\"Mike\"/>\r\n                            <div className=\"container3\">\r\n                                <h2>Jonah Tollefson</h2>\r\n                                <p className=\"title3\">Front-End Dev.</p>\r\n                                <p>Went to college with these other goobers in the US and now I work professionally as a\r\n                                    software engineer in Germany. For RobotsEvolved, I mainly worked on the frontend\r\n                                    using React. Cats and Ultimate Frisbee are life.</p>\r\n                            </div>\r\n                        </div>\r\n                    </Grid>\r\n                    <Grid item spacing={4} xs={12} sm={4} justify={\"center\"} alignItems={\"center\"}>\r\n                        <div className=\"card3\" style={{height: \"480px\"}}>\r\n                            <img src={\"/static/images/derekschultz.jpg\"} alt=\"John\"/>\r\n                            <div className=\"container3\">\r\n                                <h2>Derek Schultz</h2>\r\n                                <p className=\"title3\">Back-End Dev.</p>\r\n                                <p>Full time Software Engineer. Graduated from University of Wisconsin Platteville\r\n                                    with a BS in Computer Science and Minor in Business Administration. Worked on\r\n                                    most of the database aspect of RobotsEvolved and some back end functionality. I\r\n                                    enjoy video games, beer, and playing darts.</p>\r\n                            </div>\r\n                        </div>\r\n                    </Grid>\r\n                  </Grid>\r\n                </div>\r\n\r\n\r\n    )\r\n}","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\n\r\n\r\nexport default function ShowDailyPuzzleHistory(props) {\r\n    const handleDailyPuzzleHistoryClick = event => {\r\n        console.log(props.history)\r\n        props.handleDailyPuzzleHistoryClick(props.history)\r\n    }\r\n    return (\r\n            <Button size=\"small\" color=\"primary\" onClick={handleDailyPuzzleHistoryClick}>\r\n                 show answers\r\n            </Button>\r\n    )\r\n}","import React from 'react';\r\nimport Game from '../containers/Game';\r\nimport useStyles from '../Material-UI/themes';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport { FaCrown } from 'react-icons/fa';\r\nimport ShowDailyPuzzleHistory from '../components/ShowDailyPuzzleHistory';\r\nimport ExpansionPanel from \"@material-ui/core/ExpansionPanel\";\r\nimport ExpansionPanelSummary from \"@material-ui/core/ExpansionPanelSummary\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport ExpansionPanelDetails from \"@material-ui/core/ExpansionPanelDetails\";\r\nimport ProfilePageCreatedGamesDetails from \"../components/ProfilePageComponents/ProfilePageCreatedGamesDetails\";\r\n\r\n\r\n\r\nexport default function DailyChallengeHistory(props) {\r\n    const [expandedPanel, setExpandedPanel] = React.useState(false);\r\n    const handleChangePanel = (panel) => (event, isExpanded) => {\r\n        setExpandedPanel(isExpanded ? panel : false);\r\n    };\r\n    const classes = useStyles();\r\n    return (<div id={'GameMain'}>\r\n                <Typography className={classes.titlehome} variant=\"h3\">Daily Challenge History</Typography>\r\n                {\r\n                    props.dailychallengehistory.map((history, index) =>\r\n                        <ExpansionPanel expanded={expandedPanel === 'panelgame' + index} onChange={handleChangePanel('panelgame' + index)}>\r\n                            <ExpansionPanelSummary\r\n                                expandIcon={<ExpandMoreIcon />}\r\n                                aria-controls={\"panel\" + index + \"-content\"}\r\n                                id={\"panel\" + index + \"-header\"}\r\n                            >\r\n                                <Typography className={classes.heading}>{history.created}</Typography>\r\n                                <Typography className={classes.secondaryHeading}>Winner: {history.nameSubmitted}</Typography>\r\n                            </ExpansionPanelSummary>\r\n                            <ExpansionPanelDetails>\r\n                                <div>\r\n                                    <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                                        <FaCrown/> {history.nameSubmitted} - {history.scoreSubmitted} <FaCrown/>\r\n                                    </Typography>\r\n                                    <Typography className={classes.secondaryHeading}>Lowest possible solution: {history.bestScore}</Typography>\r\n                                    <br/>\r\n                                    <ShowDailyPuzzleHistory history={history} handleDailyPuzzleHistoryClick={props.handleDailyPuzzleHistoryClick}/>\r\n                                </div>\r\n                            </ExpansionPanelDetails>\r\n                        </ExpansionPanel>\r\n                    )\r\n                }\r\n           </div>\r\n    )\r\n}","import React from 'react';\r\nimport Game from '../containers/Game';\r\n\r\nclass DailyChallengeHistoryAnswersPage extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render () {\r\n        console.log(this.props.history);\r\n        return (\r\n            <Game\r\n                handleLineDirections={this.props.handleLineDirections}\r\n                LineDirections={this.props.LineDirections}\r\n                dailyChallengeModeAnswers={'Yes'}\r\n                nameSubmitted={this.props.history.nameSubmitted}\r\n                bestScore={this.props.history.bestScore}\r\n                created={this.props.history.created}\r\n                games={this.props.history.games}\r\n                playerStateList={this.props.history.playerStateList}\r\n                scoreSubmitted={this.props.history.scoreSubmitted}\r\n                solutionDataSubmitted={this.props.history.solutionDataSubmitted}\r\n                submitted={this.props.history.submitted}\r\n                user_id={this.props.user_id}\r\n                />\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default DailyChallengeHistoryAnswersPage;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    position: 'absolute',\r\n    left: '50%',\r\n    top: '50%',\r\n  },\r\n}));\r\n\r\nexport default function LoadingPage() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <CircularProgress size={120} color=\"secondary\" />\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport InfoIcon from '@material-ui/icons/Info';\r\nimport CasinoIcon from '@material-ui/icons/Casino';\r\nimport TodayIcon from '@material-ui/icons/Today';\r\nimport AccountBoxIcon from '@material-ui/icons/AccountBox';\r\nimport SchoolIcon from '@material-ui/icons/School';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport clsx from 'clsx';\r\nimport CreateGame from './Pages/CreateGame';\r\nimport FindGame from './Pages/FindGame';\r\nimport PlayGame from './Pages/PlayGame';\r\nimport Home from './Pages/Home';\r\nimport LoginModal from './containers/Modals/LoginModal';\r\nimport LoggedInUser from './components/LoggedInUser';\r\nimport SignInButton from './components/SignInButton';\r\nimport axios from 'axios';\r\nimport Game from './containers/Game';\r\nimport withStyles from \"@material-ui/core/styles/withStyles\";\r\nimport useTheme from \"@material-ui/core/styles/useTheme\";\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Badge from \"@material-ui/core/Badge\";\r\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport WarningIcon from '@material-ui/icons/Warning'\r\nimport ExtensionIcon from '@material-ui/icons/Extension';\r\nimport NotificationsIcon from '@material-ui/icons/Notifications';\r\nimport MoreIcon from '@material-ui/icons/MoreVert';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport {MOBILE_INNER_SCREEN_WIDTH} from \"./constants/constants\";\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\nimport teal from '@material-ui/core/colors/teal';\r\nimport PuzzleRushDifficultyModal from \"./containers/Modals/PuzzleRushDifficultyModal\";\r\nimport RandomGameDifficultyModal from \"./containers/Modals/RandomGameDifficultyModal\";\r\nimport ProfilePage from \"./Pages/ProfilePage\";\r\nimport RandomGamePage from \"./Pages/RandomGamePage\";\r\nimport PuzzleRushPage from \"./Pages/PuzzleRushPage\";\r\nimport LessonsPage from \"./Pages/LessonsPage\";\r\nimport DailyChallengePage from \"./Pages/DailyChallenge\";\r\nimport AboutUs from \"./Pages/AboutUs\";\r\nimport DailyChallengeHistory from \"./Pages/DailyChallengeHistory\";\r\nimport DailyChallengeHistoryAnswersPage from \"./Pages/DailyChallengeHistoryAnswersPage\";\r\nimport { FaMedal } from 'react-icons/fa';\r\nimport TimerIcon from '@material-ui/icons/Timer';\r\nimport LoadingPage from './components/LoadingPage';\r\n\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = (theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n    },\r\n    appBar: {\r\n        transition: theme.transitions.create(['margin', 'width'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n    },\r\n    appBarShift: {\r\n        width: `calc(100% - ${drawerWidth}px)`,\r\n        marginLeft: drawerWidth,\r\n        transition: theme.transitions.create(['margin', 'width'], {\r\n            easing: theme.transitions.easing.easeOut,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    hide: {\r\n        display: 'none',\r\n    },\r\n    drawer: {\r\n        width: drawerWidth,\r\n        flexShrink: 0,\r\n    },\r\n    drawerPaper: {\r\n        width: drawerWidth,\r\n    },\r\n    drawerHeader: {\r\n        display: 'inline-flex',\r\n        justifyContent: 'space-between',\r\n    },\r\n    drawerHeaderRight: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        padding: theme.spacing(0, 1),\r\n        // necessary for content to be below app bar\r\n        ...theme.mixins.toolbar,\r\n        justifyContent: 'flex-end',\r\n    },\r\n    drawerHeaderLeft: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        padding: theme.spacing(0, 1),\r\n        // necessary for content to be below app bar\r\n        ...theme.mixins.toolbar,\r\n    },\r\n    content: {\r\n        flexGrow: 1,\r\n        padding: theme.spacing(3),\r\n        transition: theme.transitions.create('margin', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n        marginLeft: -drawerWidth,\r\n    },\r\n    contentShift: {\r\n        transition: theme.transitions.create('margin', {\r\n            easing: theme.transitions.easing.easeOut,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n        marginLeft: 0,\r\n    },\r\n    dividerFullWidth: {\r\n        margin: `5px 0 0 ${theme.spacing(2)}px`,\r\n    },\r\n    sectionDesktop: {\r\n        display: 'none',\r\n        [theme.breakpoints.up('md')]: {\r\n            display: 'flex',\r\n        },\r\n    },\r\n    sectionMobile: {\r\n        display: 'flex',\r\n        [theme.breakpoints.up('md')]: {\r\n            display: 'none',\r\n        },\r\n    },\r\n    grow: {\r\n        flexGrow: 1,\r\n    },\r\n    title: {\r\n        display: 'none',\r\n        [theme.breakpoints.up('sm')]: {\r\n            display: 'block',\r\n        },\r\n    },\r\n    darkmode: {\r\n          body: '#363537',\r\n          text: '#FAFAFA',\r\n          toggleBorder: '#6B8096',\r\n          gradient: 'linear-gradient(#091236, #1E215D)',\r\n    },\r\n});\r\n\r\n\r\n\r\nclass App extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        if (window.uri === '') {\r\n            this.state = {\r\n                PageSelected: <Home handleClickDailyChallenge={this.handleClickDailyChallenge} handleClickRandomGame={this.handleClickRandomGame} handleClickLearnGame={this.handleClickLearnGame} handleClickCreateGame={this.handleClickCreateGame} handleClickFindGame={this.handleClickFindGame} handleClickPuzzleRush={this.handleClickPuzzleRush}/>,\r\n                dailychallengehistoryloaded: false,\r\n                profileDataloaded: false,\r\n            };\r\n        }\r\n        else {\r\n            if (window.token.g_id == undefined) {\r\n                const linedir = window.userInfo == undefined ? true : window.userInfo.LineDirFlag === 'Y';\r\n                this.state = {\r\n                    PageSelected: <PlayGame handleLineDirections={this.handleLineDirections} LineDirections={linedir} name={window.token.name} gamedata={window.token.puzzledata} highscores={window.highscores} uri={window.uri}/>, //when uri is entered to play specific game\r\n                    dailychallengehistoryloaded: false,\r\n                    profileDataloaded: false,\r\n                };\r\n            }\r\n            else {\r\n                const linedir = window.userInfo == undefined ? true : window.userInfo.LineDirFlag === 'Y';\r\n                this.state = {\r\n                    PageSelected: <RandomGamePage handleLineDirections={this.handleLineDirections} LineDirections={linedir} randomGame={'Yes'} game={window.token} difficulty={window.token.g_difficulty}/>,\r\n                    dailychallengehistoryloaded: false,\r\n                    profileDataloaded: false,\r\n                }\r\n            }\r\n        }\r\n        this.state.open = false;\r\n        this.state.mobileAnchorEl = null;\r\n        this.state.mobileMenuOpen = false;\r\n        this.state.showLoginModal = false;\r\n        this.state.showPuzzleRushModal = false;\r\n         if (window.loggedin === 'Yes') {\r\n            this.state.LineDirections = window.userInfo.LineDirFlag === 'Y';\r\n         }\r\n         else {\r\n            this.state.LineDirections = true;\r\n         }\r\n    }\r\n\r\n    handleDrawerClose = () => {\r\n        this.setState( {\r\n            open: false\r\n        })\r\n    };\r\n\r\n    handleLineDirections = (boolean) => {\r\n        if (window.loggedin === 'Yes') {\r\n            axios.post('/settingsChange', {LineDirections: boolean ? 'Y' : 'N'})\r\n                .then( res => {\r\n                    console.log('changed');\r\n                });\r\n        }\r\n        this.setState({\r\n            LineDirections: boolean\r\n        });\r\n    }\r\n\r\n    handleClickDailyChallenge = () => {\r\n        axios.get('/getDailyChallengeData')\r\n            .then( res => {\r\n                    var isOpen = this.state.open;\r\n                    if (window.innerWidth < MOBILE_INNER_SCREEN_WIDTH) {\r\n                        isOpen = false\r\n                    }\r\n                    const dc_movesList = res.data.dc_movesList == null ? null : JSON.parse(res.data.dc_movesList)\r\n                    const dc_playerList = res.data.dc_playerList == null ? null : JSON.parse(res.data.dc_playerList)\r\n                    this.setState({\r\n                                    PageSelected: <DailyChallengePage\r\n                                                        handleClickDailyChallenge={this.handleClickDailyChallenge}\r\n                                                        dailyChallengeGameslist={JSON.parse(res.data.dailyChallengeGameslist)}\r\n                                                        dc_id={res.data.dc_id}\r\n                                                        dchighscores={JSON.parse(res.data.dchighscores)}\r\n                                                        handleLineDirections={this.handleLineDirections}\r\n                                                        LineDirections={this.state.LineDirections}\r\n                                                        savedMoves={dc_movesList}\r\n                                                        playerStateList={dc_playerList}\r\n                                    />,\r\n                                    open: isOpen\r\n                                });\r\n                    });\r\n        this.setState({\r\n            PageSelected: <LoadingPage/>,\r\n        });\r\n    }\r\n\r\n    handleDrawerOpen = () => {\r\n        this.setState( {\r\n            open: true\r\n        });\r\n    };\r\n\r\n    SignInButtonPressed = (type) => {\r\n        if (type === 'Sign in') {\r\n            this.setState({\r\n                showLoginModal: true\r\n            });\r\n        }\r\n        else {\r\n            window.location.href = \"/auth/logout\";\r\n        }\r\n    };\r\n\r\n    handleClickRandomGameModal = (game,difficulty) => {\r\n        var isOpen = this.state.open;\r\n        if (window.innerWidth < MOBILE_INNER_SCREEN_WIDTH) {\r\n            isOpen = false\r\n        }\r\n        this.setState({\r\n            PageSelected: null\r\n        });\r\n        this.setState({\r\n            showRandomGameModal: false,\r\n            PageSelected: <RandomGamePage handleLineDirections={this.handleLineDirections} LineDirections={this.state.LineDirections} randomGame={'Yes'} game={game} difficulty={difficulty}/>,\r\n            open: isOpen\r\n        });\r\n    }\r\n\r\n    handleClickRandomGame = (event) => {\r\n        event.preventDefault();\r\n        this.setState({\r\n            showRandomGameModal: true,\r\n        });\r\n    }\r\n\r\n\r\n    handleClickPuzzleRush = event => {\r\n        event.preventDefault();\r\n        this.setState({\r\n            showPuzzleRushModal: true,\r\n        });\r\n    };\r\n\r\n    handleClickDailyChallengeHistory = (event) => {\r\n        event.preventDefault();\r\n        axios.get('/getDailyChallengeHistory')\r\n            .then( res => {\r\n                    var isOpen = this.state.open;\r\n                    if (window.innerWidth < MOBILE_INNER_SCREEN_WIDTH) {\r\n                        isOpen = false\r\n                    }\r\n                    var historydata = JSON.parse(res.data)\r\n                    this.setState({\r\n                        PageSelected: <DailyChallengeHistory handleDailyPuzzleHistoryClick={this.handleDailyPuzzleHistoryClick} dailychallengehistory={historydata}/>,\r\n                        challengeHistoryData: historydata,\r\n                        dailychallengehistoryloaded: true,\r\n                        open: isOpen\r\n                    });\r\n            });\r\n        this.setState({\r\n            PageSelected: <LoadingPage/>,\r\n        });\r\n    }\r\n\r\n    handleDailyPuzzleHistoryClick = history => {\r\n        var isOpen = this.state.open;\r\n        if (window.innerWidth < MOBILE_INNER_SCREEN_WIDTH) {\r\n            isOpen = false\r\n        }\r\n        this.setState({\r\n            PageSelected: <DailyChallengeHistoryAnswersPage handleLineDirections={this.handleLineDirections} LineDirections={this.state.LineDirections} history={history}/>,\r\n            open: isOpen\r\n        });\r\n    }\r\n\r\n    handleClickPuzzleRushModal = (difficulty,games,p_id) => {\r\n        var isOpen = this.state.open;\r\n        if (window.innerWidth < MOBILE_INNER_SCREEN_WIDTH) {\r\n            isOpen = false\r\n        }\r\n        this.setState({\r\n            PageSelected: null\r\n        });\r\n        this.setState({\r\n            showPuzzleRushModal: false,\r\n            PageSelected: <PuzzleRushPage handleLineDirections={this.handleLineDirections} LineDirections={this.state.LineDirections} puzzleRush={'Yes'} games={games} p_id={p_id} difficulty={difficulty}/>,\r\n            open: isOpen\r\n        });\r\n    };\r\n\r\n    closeLoginModal = event => {\r\n        event.preventDefault();\r\n        this.setState({\r\n            showLoginModal: false\r\n        });\r\n    };\r\n\r\n    closePuzzleRushLoginModal = event => {\r\n        event.preventDefault();\r\n        this.setState({\r\n            showPuzzleRushModal: false\r\n        });\r\n    }\r\n\r\n    closeRandomGameLoginModal = event => {\r\n        event.preventDefault();\r\n        this.setState({\r\n            showRandomGameModal: false\r\n        });\r\n    }\r\n\r\n    handleGameClick = (name, gamedata,highscores,uri) => {\r\n        var isOpen = this.state.open;\r\n        if (window.innerWidth < MOBILE_INNER_SCREEN_WIDTH) {\r\n            isOpen = false\r\n        }\r\n        this.setState({\r\n            PageSelected: <PlayGame handleLineDirections={this.handleLineDirections} LineDirections={this.state.LineDirections} name={name} highscores={highscores} gamedata={gamedata} uri={uri}/>,\r\n            open: isOpen\r\n        });\r\n    };\r\n\r\n    handleClickCreateGame = event => {\r\n        event.preventDefault();\r\n        var isOpen = this.state.open;\r\n        if (window.innerWidth < MOBILE_INNER_SCREEN_WIDTH) {\r\n            isOpen = false\r\n        }\r\n        this.setState({\r\n            PageSelected: <CreateGame handleLineDirections={this.handleLineDirections} LineDirections={this.state.LineDirections} state={\"new\"}/>,\r\n             open: isOpen\r\n        });\r\n    };\r\n\r\n\r\n    handleClickProfile = event => {\r\n        if (window.loggedin === 'Yes') {\r\n                    axios.get('/getProfileData')\r\n                        .then( res => {\r\n                            var isOpen = this.state.open;\r\n                            if (window.innerWidth < MOBILE_INNER_SCREEN_WIDTH) {\r\n                                isOpen = false\r\n                            }\r\n                            var profileData = res.data;\r\n                            var gamesview = JSON.parse(profileData.gamesview)\r\n                            var solutionsview = JSON.parse(profileData.solutionsview)\r\n                            var puzzlerushview = JSON.parse(profileData.puzzlerushview)\r\n                            this.setState({\r\n                                PageSelected: <ProfilePage handleClickPlayGame={this.handleGameClick} gamesview={gamesview} solutionsview={solutionsview} puzzlerushview={puzzlerushview}/>,\r\n                                gamesview: gamesview,\r\n                                solutionsview: solutionsview,\r\n                                puzzlerushview: puzzlerushview,\r\n                                profileDataloaded: true,\r\n                                open: isOpen\r\n                            });\r\n                        });\r\n                    this.setState({\r\n                        PageSelected: <LoadingPage/>,\r\n                    });\r\n                }\r\n        else {\r\n            this.SignInButtonPressed('Sign in');\r\n        }\r\n    };\r\n\r\n\r\n    handleClickFindGame = event => {\r\n        event.preventDefault();\r\n        axios.get('/getFindGames')\r\n            .then( res => {\r\n                const gameslist = JSON.parse(res.data.gameslist)\r\n                const highscoreslist = JSON.parse(res.data.highscoreslist)\r\n                var isOpen = this.state.open;\r\n                if (window.innerWidth < MOBILE_INNER_SCREEN_WIDTH) {\r\n                    isOpen = false\r\n                }\r\n                this.setState({\r\n                    PageSelected: <FindGame gameslist={gameslist} highscoreslist={highscoreslist} handleGameClick={this.handleGameClick}/>,\r\n                    open: isOpen\r\n                });\r\n        });\r\n        this.setState({\r\n            PageSelected: <LoadingPage/>,\r\n        });\r\n    };\r\n\r\n    handleHomePageClick = () => {\r\n        this.setState({\r\n            PageSelected: <Home handleClickDailyChallenge={this.handleClickDailyChallenge} handleClickRandomGame={this.handleClickRandomGame} handleClickLearnGame={this.handleClickLearnGame} handleClickCreateGame={this.handleClickCreateGame} handleClickFindGame={this.handleClickFindGame} handleClickPuzzleRush={this.handleClickPuzzleRush}/>,\r\n        });\r\n    }\r\n\r\n\r\n    handleClickAboutUs = event => {\r\n        var isOpen = this.state.open;\r\n        if (window.innerWidth < MOBILE_INNER_SCREEN_WIDTH) {\r\n            isOpen = false\r\n        }\r\n        this.setState({\r\n            PageSelected: <AboutUs/>,\r\n            open: isOpen\r\n        });\r\n    }\r\n\r\n    handleClickLearnGame = event => {\r\n        event.preventDefault();\r\n        var isOpen = this.state.open;\r\n        if (window.innerWidth < MOBILE_INNER_SCREEN_WIDTH) {\r\n            isOpen = false\r\n        }\r\n        this.setState({\r\n            PageSelected: <LessonsPage handleLineDirections={this.handleLineDirections} LineDirections={this.state.LineDirections}/>,\r\n            open: isOpen\r\n        });\r\n\r\n    };\r\n\r\n    handleMobileMenuClose = () => {\r\n        this.setState({\r\n            mobileAnchorEl: null,\r\n            mobileMenuOpen: false\r\n        });\r\n    };\r\n\r\n    showPage = () => {\r\n        return(\r\n            this.state.PageSelected\r\n        )\r\n    }\r\n\r\n\r\n    handleMobileMenuOpen = (event) => {\r\n        this.setState({\r\n            mobileAnchorEl: event.currentTarget,\r\n            mobileMenuOpen: true\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n        const theme = createMuiTheme({\r\n            palette: {\r\n                primary: teal,\r\n                secondary: {\r\n                    main: '#e65100',\r\n                },\r\n            }\r\n        });\r\n        return (\r\n            <MuiThemeProvider theme={theme}>\r\n                <div className={classes.root}>\r\n                    <AppBar\r\n                        position=\"fixed\"\r\n                        className={clsx(classes.appBar, {\r\n                            [classes.appBarShift]: this.state.open,\r\n                        })}\r\n                     >\r\n                        <Toolbar>\r\n                            <IconButton\r\n                                color=\"inherit\"\r\n                                aria-label=\"open drawer\"\r\n                                onClick={this.handleDrawerOpen}\r\n                                edge=\"start\"\r\n                                className={clsx(classes.menuButton, this.state.open && classes.hide)}\r\n                            >\r\n                                <MenuIcon />\r\n                            </IconButton>\r\n                            <img onClick={this.handleHomePageClick} width={50} height={50} src=\"/static/images/logo150.png\"/>\r\n                            <Typography variant=\"h6\" className={classes.title} noWrap>\r\n                                <a href=\"/\" style={{color: 'white'}}>RobotsEvolved\r\n                                    <span>.com</span>\r\n                                </a>\r\n                            </Typography>\r\n                            <div className={classes.grow} />\r\n                            <div className={classes.sectionDesktop}>\r\n                                <LoggedInUser/>\r\n                            </div>\r\n                            <div className={classes.sectionMobile}>\r\n                                <IconButton\r\n                                    aria-label=\"show more\"\r\n                                    aria-controls={\"primary-search-account-menu-mobile\"}\r\n                                    aria-haspopup=\"true\"\r\n                                    onClick={this.handleMobileMenuOpen}\r\n                                    color=\"inherit\"\r\n                                >\r\n                                    <MoreIcon />\r\n                                </IconButton>\r\n                            </div>\r\n                        </Toolbar>\r\n                    </AppBar>\r\n                    <Menu\r\n                        anchorEl={this.state.mobileAnchorEl}\r\n                        anchorOrigin={{vertical: 'top', horizontal: 'right'}}\r\n                        id={\"primary-search-account-menu-mobile\"}\r\n                        keepMounted\r\n                        transformOrigin={{vertical: 'top', horizontal: 'right'}}\r\n                        open={this.state.mobileMenuOpen}\r\n                        onClose={this.handleMobileMenuClose}\r\n                    >\r\n                        <MenuItem>\r\n                            <LoggedInUser/>\r\n                        </MenuItem>\r\n                        <MenuItem>\r\n                            <p>Notifications</p>\r\n                            <IconButton aria-label=\"show 11 new notifications\" color=\"inherit\">\r\n                                <Badge badgeContent={11} color=\"secondary\">\r\n                                    <NotificationsIcon/>\r\n                                </Badge>\r\n                            </IconButton>\r\n                        </MenuItem>\r\n                    </Menu>\r\n                    <Drawer\r\n                        id=\"MainDrawer\"\r\n                        className={classes.drawer}\r\n                        variant=\"persistent\"\r\n                        anchor=\"left\"\r\n                        open={this.state.open}\r\n                        classes={{\r\n                            paper: classes.drawerPaper,\r\n                        }}\r\n                    >\r\n                        <div className={classes.drawerHeader}>\r\n                            <div className={classes.drawerHeaderLeft}>\r\n                                <SignInButton onClick={this.SignInButtonPressed}/>\r\n                            </div>\r\n                            <div className={classes.drawerHeaderRight}>\r\n                                <IconButton onClick={this.handleDrawerClose}>\r\n                                    {useTheme.direction === 'ltr' ? <ChevronLeftIcon /> : <ChevronRightIcon />}\r\n                                </IconButton>\r\n                            </div>\r\n                        </div>\r\n                        <Divider />\r\n                        <Typography\r\n                            className={classes.dividerFullWidth}\r\n                            color=\"textSecondary\"\r\n                            display=\"block\"\r\n                            variant=\"caption\"\r\n                        >\r\n                            Play\r\n                        </Typography>\r\n                        <List>\r\n                            <ListItem button key={'Create a Game'} onClick={this.handleClickCreateGame}>\r\n                                <ListItemIcon><PlayArrowIcon /></ListItemIcon>\r\n                                <ListItemText primary={'Create a Game'} />\r\n                            </ListItem>\r\n                            <ListItem button key={'Find a Game'} onClick={this.handleClickFindGame}>\r\n                                <ListItemIcon><SearchIcon /></ListItemIcon>\r\n                                <ListItemText primary={'Find a Game'} />\r\n                            </ListItem>\r\n                            <ListItem button key={'Daily Challenge'} onClick={this.handleClickDailyChallenge}>\r\n                                <ListItemIcon><TodayIcon /></ListItemIcon>\r\n                                <ListItemText primary={'Daily Challenge'} />\r\n                            </ListItem>\r\n                            <ListItem button key={'Random Game'} onClick={this.handleClickRandomGame}>\r\n                                <ListItemIcon><CasinoIcon /></ListItemIcon>\r\n                                <ListItemText primary={'Random Game'} />\r\n                            </ListItem>\r\n                            <ListItem button key={'Puzzle Rush'} onClick={this.handleClickPuzzleRush}>\r\n                                <ListItemIcon><TimerIcon /></ListItemIcon>\r\n                                <ListItemText primary={'Puzzle Rush'} />\r\n                            </ListItem>\r\n                        </List>\r\n                        <Divider />\r\n                        <Typography\r\n                            className={classes.dividerFullWidth}\r\n                            color=\"textSecondary\"\r\n                            display=\"block\"\r\n                            variant=\"caption\"\r\n                        >\r\n                            Learn\r\n                        </Typography>\r\n                        <List>\r\n                            <ListItem button key={'Lessons'} onClick={this.handleClickLearnGame}>\r\n                                <ListItemIcon><SchoolIcon /></ListItemIcon>\r\n                                <ListItemText primary={'Lessons'} />\r\n                            </ListItem>\r\n                        </List>\r\n                        <Divider />\r\n                        <Typography\r\n                            className={classes.dividerFullWidth}\r\n                            color=\"textSecondary\"\r\n                            display=\"block\"\r\n                            variant=\"caption\"\r\n                        >\r\n                            Community\r\n                        </Typography>\r\n                        <List>\r\n                            <ListItem button key={'Profile'} onClick={this.handleClickProfile}>\r\n                                <ListItemIcon><AccountBoxIcon /></ListItemIcon>\r\n                                <ListItemText primary={'Profile'} />\r\n                            </ListItem>\r\n                            <ListItem button key={'Daily Challenge History'} onClick={this.handleClickDailyChallengeHistory}>\r\n                                <ListItemIcon><FaMedal /></ListItemIcon>\r\n                                <ListItemText primary={'Daily Challenge History'} />\r\n                            </ListItem>\r\n                        </List>\r\n                        <Divider />\r\n                        <Typography\r\n                            className={classes.dividerFullWidth}\r\n                            color=\"textSecondary\"\r\n                            display=\"block\"\r\n                            variant=\"caption\"\r\n                        >\r\n                            Tools\r\n                        </Typography>\r\n                        <List>\r\n                            <ListItem button key={'About'} onClick={this.handleClickAboutUs}>\r\n                                <ListItemIcon><InfoIcon /></ListItemIcon>\r\n                                <ListItemText primary={'About'} />\r\n                            </ListItem>\r\n                        </List>\r\n                    </Drawer>\r\n                    <main className={clsx(classes.content, {\r\n                        [classes.contentShift]: this.state.open,\r\n                    })}>\r\n                        <div className={classes.drawerHeader} />\r\n                        {this.showPage()}\r\n                    </main>\r\n                    <LoginModal closeLoginModal={this.closeLoginModal} show={this.state.showLoginModal}/>\r\n                    <PuzzleRushDifficultyModal\r\n                        closeModal={this.closePuzzleRushLoginModal}\r\n                        show={this.state.showPuzzleRushModal}\r\n                        handleClickPuzzleRush={this.handleClickPuzzleRushModal}\r\n                    />\r\n                    <RandomGameDifficultyModal\r\n                        closeModal={this.closeRandomGameLoginModal}\r\n                        show={this.state.showRandomGameModal}\r\n                        handleClickRandomGame={this.handleClickRandomGameModal}\r\n                    />\r\n                </div>\r\n            </MuiThemeProvider>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withStyles(useStyles)(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\nReactDOM.render(<BrowserRouter><App /></BrowserRouter>, document.getElementById('MainApp'));\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}